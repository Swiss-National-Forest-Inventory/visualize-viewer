{
  "version": 3,
  "sources": ["../src/util/LoaderUtil.js", "../src/config.js", "../src/util/shared.js", "../src/services/UiAccessService.js", "../src/services/ChartService.js", "../src/services/StepperService.js", "../src/services/UrlService.js", "../src/services/I18nService.js", "../src/util/QueryUtil.js", "../src/services/PropertyService.js", "../src/services/RegionService.js", "../src/services/VisualizationService.js", "../src/services/FilterService.js", "../src/util/ChartStateUtil.js", "../src/services/LinkService.js", "../src/LfiViewer.js", "../index.js"],
  "sourcesContent": ["/**\r\n * Shows and hides page elements like loader and content, and displays error messages.\r\n */\r\n\r\n/**\r\n * Displays the loader element and hides the main content element.\r\n * @function showLoader\r\n * @returns {void}\r\n */\r\nexport const showLoader = () => {\r\n  const loader = document.getElementById('loader');\r\n  const content = document.getElementById('content');\r\n  loader.classList.remove('hidden');\r\n  content.classList.add('hidden');\r\n};\r\n\r\n/**\r\n * Hides the loader element and displays the main content element.\r\n * @function hideLoader\r\n * @returns {void}\r\n */\r\nexport const hideLoader = () => {\r\n  const loader = document.getElementById('loader');\r\n  const content = document.getElementById('content');\r\n  loader.classList.add('hidden');\r\n  content.classList.remove('hidden');\r\n};\r\n\r\n/**\r\n * Displays an error message in the loader element using the provided language setting.\r\n * @function showError\r\n * @param {Object} i18nService - A service containing internationalization (i18n) configurations.\r\n * @param {string} lang - The current language code (e.g., 'en', 'de', 'fr').\r\n * @returns {void}\r\n */\r\nexport const showError = (i18nService, lang) => {\r\n  const loader = document.getElementById('loader');\r\n  loader.innerHTML = i18nService.config.error[lang];\r\n};\r\n", "/**\r\n * The base URL for chart/map visualization.\r\n * @type {string}\r\n */\r\nexport const VISUALIZE_URL = 'https://int.visualize.admin.ch';\r\n\r\n/**\r\n * The main (cached) LINDAS SPARQL endpoint URL for data queries.\r\n * @type {string}\r\n */\r\nexport const LINDAS_ENDPOINT = 'https://lindas-cached.cluster.ldbar.ch/query';\r\n\r\n/**\r\n * A specific cached endpoint for the 2024-1 NFI cube.\r\n * @type {string}\r\n */\r\nexport const LINDAS_CACHED_ENDPOINT = `${LINDAS_ENDPOINT}/https://environment.ld.admin.ch/foen/nfi/nfi_C-96/cube/2024-1`;\r\n\r\n/**\r\n * A global debug flag. If `true`, filter changes and other debug logs will be printed.\r\n * @type {boolean}\r\n */\r\nexport const DEBUG_LOGS = false; // turn off to not log filter changes in console\r\n\r\n/**\r\n * First part of the link to display a cube on visualize\r\n * @type {string}\r\n */\r\nexport const VISUALIZE_CUBE_LINK_START = 'https://visualize.admin.ch/create/new?cube=';\r\n\r\n/**\r\n * The IRI of the topic that should get selected as default on startup:\r\n * 44 = Waldfl\u00E4che\r\n * @type {string}\r\n */\r\nexport const DEFAULT_TOPIC = 'https://environment.ld.admin.ch/foen/nfi/Topic/44';\r\n\r\n/**\r\n * After selecting a topic, the classification is selected from this list.\r\n * Classifications are listed by priority as not all classifications are available for all topics\r\n *\r\n * @type {string[]}\r\n */\r\nexport const DEFAULT_CLASSIFICATION_LIST = [\r\n  'https://environment.ld.admin.ch/foen/nfi/nfi_C-94/cube/2024-1', // Eigentum (2 Klassen)\r\n  'https://environment.ld.admin.ch/foen/nfi/nfi_C-96/cube/2024-1', // Nadelholz, Laubholz\r\n  'https://environment.ld.admin.ch/foen/nfi/nfi_C-20/cube/2024-1', // Entwicklungsstufe\r\n  'https://environment.ld.admin.ch/foen/nfi/nfi_C-2632/cube/2024-1', // NaiS-Vegetationsh\u00F6henstufen (10 Klassen)\r\n];\r\n\r\n/**\r\n * Topics that are fetched from Visualize, but should be ignored for simplicity of the app\r\n * Discussed with Barbara 2025-01-29\r\n *\r\n * @type {string[]}\r\n */\r\nexport const TOPICS_TO_IGNORE = [\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/47',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/47r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/48',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/48r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/397',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/397r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/19',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/19r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/70',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/70r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/69',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/69r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/72',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/72r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/49',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/49r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/50',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/50r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/125',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/214',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/214r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/215',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/215r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/417',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/417r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/395',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/395r',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/210',\r\n  'https://environment.ld.admin.ch/foen/nfi/Topic/210r',\r\n];\r\n\r\n/**\r\n * Classifications that should be ignored\r\n * @type {string[]}\r\n */\r\nexport const CLASSIFICATIONS_TO_IGNORE = [\r\n  /**\r\n   * Baumarten (56 Klassen)\r\n   * Ignored because atm tree names are only available in latin\r\n   */\r\n  'https://environment.ld.admin.ch/foen/nfi/nfi_C-2207/cube/2024-1',\r\n];", "import {DEFAULT_CLASSIFICATION_LIST} from '../config.js';\r\n\r\n/**\r\n * Retrieves URL parameters from the window location hash.\r\n * @returns {URLSearchParams} The URLSearchParams object representing the current hash parameters.\r\n */\r\nexport function getUrlParams() {\r\n  return new URLSearchParams(window.location.hash?.substring(1));\r\n}\r\n\r\n/**\r\n * Event handler for the Thema (measure) dropdown change.\r\n * @param {LfiViewer} lfiViewer\r\n * @param {Event} event - The change event from the measure dropdown.\r\n * @returns {void}\r\n */\r\nexport function onUpdateMeasure(lfiViewer, event) {\r\n  lfiViewer.setMeasure(event.target.value);\r\n}\r\n\r\n/**\r\n * Event handler for filter (Bezugsfl\u00E4che) dropdown changes.\r\n * @param {LfiViewer} lfiViewer\r\n * @param {Event} event - The change event from the filter dropdown.\r\n * @returns {void}\r\n */\r\nexport function onUpdateFilter(lfiViewer, event) {\r\n  const filter = event.target.id.replace('-filter', '');\r\n  const value = event.target.value;\r\n  lfiViewer.setSelectedFilter(filter, value);\r\n}\r\n\r\n/**\r\n * Event handler for the Klassifikation dropdown change.\r\n * @param {LfiViewer} lfiViewer\r\n * @param {Event} event - The change event from the classification dropdown.\r\n * @returns {void}\r\n */\r\nexport function onUpdateClassification(lfiViewer, event) {\r\n  lfiViewer.setClassification(event.target.value);\r\n}\r\n\r\n/**\r\n * Event handler for the region dropdown change.\r\n * @param {LfiViewer} lfiViewer\r\n * @param {Event} event - The change event from the region dropdown.\r\n * @returns {void}\r\n */\r\nexport function onUpdateRegion(lfiViewer, event) {\r\n  lfiViewer.setRegion(event.target.value);\r\n}\r\n\r\n/**\r\n * Event handler for the region-type dropdown change.\r\n * @param {LfiViewer} lfiViewer\r\n * @param {Event} event - The change event from the region-type dropdown.\r\n * @returns {void}\r\n */\r\nexport function onUpdateRegionType(lfiViewer, event) {\r\n  lfiViewer.setRegionType(event.target.value);\r\n}\r\n\r\n/**\r\n * Transforms a string to be usable as a CSS class or ID by removing unwanted characters.\r\n * @param {string} string - The input string to transform.\r\n * @returns {string} The transformed string, safe for use as a CSS class or ID.\r\n */\r\nexport function cssifyString(string) {\r\n  return string.trim().replaceAll(/\\s/g, '-').replaceAll(/[()]/g, '');\r\n}\r\n\r\n/**\r\n * Evaluates a list of measures and returns the first measure that matches a predefined classification value.\r\n * The classification is determined based on a prioritized list of default classifications.\r\n * If no matching classification is found, the method returns the first measure by default and logs a message.\r\n *\r\n * @param {Array<Measure>} measures - An array of measure objects. Each object must have a `cube` property with a `value`.\r\n * @return {Measure} The measure object that matches the highest-priority classification or the first measure if no match is found.\r\n */\r\nexport function evaluateCube(measures) {\r\n  let measure = measures[0];\r\n\r\n  if (DEFAULT_CLASSIFICATION_LIST && DEFAULT_CLASSIFICATION_LIST.length > 0) {\r\n    const firstFoundClassification = measures.find((m) => m.cube.value === DEFAULT_CLASSIFICATION_LIST[0]);\r\n    if (firstFoundClassification) {\r\n      measure = firstFoundClassification;\r\n    } else {\r\n      const secondFoundClassification = measures.find((m) => m.cube.value === DEFAULT_CLASSIFICATION_LIST[1]);\r\n      if (secondFoundClassification) {\r\n        measure = secondFoundClassification;\r\n      } else {\r\n        const thirdFoundClassification = measures.find((m) => m.cube.value === DEFAULT_CLASSIFICATION_LIST[2]);\r\n        if (thirdFoundClassification) {\r\n          measure = thirdFoundClassification;\r\n        } else {\r\n          const fourthFoundClassification = measures.find((m) => m.cube.value === DEFAULT_CLASSIFICATION_LIST[3]);\r\n          if (fourthFoundClassification) {\r\n            measure = fourthFoundClassification;\r\n          } else {\r\n            console.log(\"%c\" + 'Classification not found in measure', \"color:black; background-color:orange;\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return measure;\r\n}\r\n\r\n/**\r\n * Get a predefined chart color in HEX\r\n * @param {Number} color 1 or 2\r\n * @return {string} color value HEX\r\n */\r\nexport function getColor(color) {\r\n  const colors = {\r\n    0: '0, 98, 104', // greenWsl, page-layout.css variable --chart-color-1\r\n    1: '0, 98, 104', // greenWsl, page-layout.css variable --chart-color-1\r\n    2: '152, 39, 41', // redish, page-layout.css variable --chart-color-2\r\n    3: '128, 128, 128', // grey, page-layout.css variable --chart-color-3\r\n    4: '153, 204, 204',\r\n    5: '51, 102, 204',\r\n    6: '153, 204, 153',\r\n    7: '51, 153, 51',\r\n    8: '255, 153, 153',\r\n    9: '204, 51, 51',\r\n    10: '255, 204, 102',\r\n    11: '255, 102, 0',\r\n    12: '204, 153, 204',\r\n    13: '102, 51, 153',\r\n    14: '0, 153, 102',\r\n    15: '153, 102, 51',\r\n    16: '204, 204, 204',\r\n    17: '102, 102, 102',\r\n    18: '51, 51, 51',\r\n  };\r\n\r\n  let colorSelected = colors[color];\r\n  if (colorSelected === undefined) {\r\n    colorSelected = colors[0];\r\n    console.error(\"Not enough colors defined, please add more colors\");\r\n  }\r\n  const colorRgb = colorSelected.split(', ');\r\n  return rgbToHex(colorRgb[0], colorRgb[1], colorRgb[2]);\r\n}\r\n\r\n/**\r\n * Converts RGB color values to a hexadecimal color string.\r\n *\r\n * @param {number} r\r\n * @param {number} g\r\n * @param {number} b\r\n * @return {string} A string representing the color in hexadecimal format (e.g., \"#RRGGBB\").\r\n */\r\nfunction rgbToHex(r, g, b) {\r\n  return \"#\" + (1 << 24 | Number(r) << 16 | Number(g) << 8 | Number(b)).toString(16).slice(1);\r\n}", "import {cssifyString} from '../util/shared.js';\r\nimport {TOPICS_TO_IGNORE} from '../config.js';\r\n\r\n/**\r\n * A service class that provides methods to manage and update UI elements such as\r\n * dropdowns, checkboxes, and layout classes. This includes setting dropdown values,\r\n * populating selects, handling nested select structures, and toggling visibility.\r\n */\r\nexport class UiAccessService {\r\n  /**\r\n   * Sets the value of a dropdown (select element) by ID.\r\n   * @param {string} id - The ID of the dropdown element in the DOM.\r\n   * @param {string|number} value - The value to be set for the dropdown.\r\n   * @returns {void}\r\n   */\r\n  setValueForDropdown = (id, value) => {\r\n    const element = document.getElementById(id);\r\n    if (!element) {\r\n      return;\r\n    }\r\n    element.value = value;\r\n  };\r\n\r\n  /**\r\n   * Toggles UI elements based on the current mode (e.g., \"chart\" or \"map\").\r\n   * Updates active states of buttons and hides/shows relevant fields.\r\n   * @param {string} value - The mode value (\"chart\" or \"map\").\r\n   * @returns {void}\r\n   */\r\n  setMode = (value) => {\r\n    document.getElementById('chart-button').classList.toggle('active', value === 'chart');\r\n    document.getElementById('map-button').classList.toggle('active', value === 'map');\r\n    document.getElementById('grouped-region-field').classList.toggle('hidden', value === 'map');\r\n  };\r\n\r\n  setGroupedClassification = (checked) => {\r\n    const checkbox = document.getElementById('grouped-classification');\r\n    checkbox.checked = checked;\r\n\r\n    document.getElementById('classification-filter').classList.toggle('hidden', checked);\r\n  };\r\n\r\n  /**\r\n   * Sets the \"grouped\" checkbox state and toggles visibility of the region and region-type fields.\r\n   * @param {boolean} displayRegionTypes - If true, displays the region-type field\r\n   *  and hides the region field; otherwise, the reverse.\r\n   * @returns {void}\r\n   */\r\n  setGroupedRegion = (displayRegionTypes) => {\r\n    const checkbox = document.getElementById('grouped-region');\r\n    checkbox.checked = displayRegionTypes;\r\n\r\n    document.getElementById('region-field').classList.toggle('hidden', displayRegionTypes);\r\n    document.getElementById('region-type-field').classList.toggle('hidden', !displayRegionTypes);\r\n  };\r\n\r\n  /**\r\n   * Sets the value of the region-type dropdown.\r\n   * @param {string} value - The value to set for the region-type dropdown.\r\n   * @returns {void}\r\n   */\r\n  setRegionType = (value) => {\r\n    this.setValueForDropdown('region-type', value);\r\n  };\r\n\r\n  /**\r\n   * Sets the value of the region dropdown.\r\n   * @param {string} value - The value to set for the region dropdown.\r\n   * @returns {void}\r\n   */\r\n  setRegion = (value) => {\r\n    this.setValueForDropdown('region', value);\r\n  };\r\n\r\n  /**\r\n   * Sets the value of the measures dropdown.\r\n   * @param {string} value - The measure to set in the measures dropdown.\r\n   * @returns {void}\r\n   */\r\n  setMeasure = (value) => {\r\n    this.setValueForDropdown('measures', value);\r\n  };\r\n\r\n  /**\r\n   * Sets the value of the classification dropdown.\r\n   * @param {string} value - The classification to set in the classification dropdown.\r\n   * @returns {void}\r\n   */\r\n  setClassification = (value) => {\r\n    this.setValueForDropdown('classification', value);\r\n  };\r\n\r\n  /**\r\n   * Sets the value of a generic filter dropdown based on a filter key.\r\n   * @param {string} key - The key identifying the filter (e.g., dimension path).\r\n   * @param {string|number} value - The value to set in the dropdown.\r\n   * @returns {void}\r\n   */\r\n  setOtherFilter = (key, value) => {\r\n    const id = `${cssifyString(key)}-filter`;\r\n    this.setValueForDropdown(id, value);\r\n  };\r\n\r\n  /**\r\n   * Populates a single-level select (dropdown) element within a given container field.\r\n   * Optionally sorts elements if populating the \"topic-field\".\r\n   * @param {string} fieldId - The ID of the container element for this field.\r\n   * @param {string} selectId - The ID to assign to the created <select> element.\r\n   * @param {Array<any>} elements - The array of elements to populate in the dropdown.\r\n   * @param {Function} getValue - A function that returns the value attribute for an element.\r\n   * @param {Function} getDisplayText - A function that returns the display text for an element.\r\n   * @param {boolean} isSearch - If `true`, adds 'search' CSS class to the dropdown.\r\n   * @param {Function} onChange - The callback function to invoke on the dropdown's 'change' event.\r\n   * @param {string} labelText - The text to display in the associated <label>.\r\n   * @param {string|null} selectedClassification - The id of the cube (classification)\r\n   * @returns {void}\r\n   */\r\n  populateSelect = (\r\n      fieldId,\r\n      selectId,\r\n      elements,\r\n      getValue,\r\n      getDisplayText,\r\n      isSearch,\r\n      onChange,\r\n      labelText,\r\n      selectedClassification = null\r\n  ) => {\r\n    let sanitizedElements = elements\r\n\r\n    if (fieldId === 'topic-field') {\r\n      // Filter the elements that are not in the topics ignore list\r\n      sanitizedElements = sanitizedElements.filter((element) => {\r\n        return TOPICS_TO_IGNORE.includes(element.dimPath.value) === false;\r\n      });\r\n    }\r\n\r\n    if (fieldId === 'topic-field' || fieldId === 'classification-field') {\r\n      sanitizedElements = sanitizedElements.sort((a, b) => a.dimName.value > b.dimName.value);\r\n    }\r\n\r\n    if (fieldId === 'https://environment.ld.admin.ch/foen/nfi/classificationUnit-filter-field') {\r\n      sanitizedElements = sanitizeClassificationFilterField(sanitizedElements)\r\n    }\r\n\r\n    const container = document.getElementById(fieldId);\r\n    container.className = 'field';\r\n    container.innerHTML = '';\r\n\r\n    const select = document.createElement('select');\r\n    select.id = selectId;\r\n    select.className = 'ui dropdown' + (isSearch ? ' search': '');\r\n    select.addEventListener('change', onChange);\r\n    if (sanitizedElements.length <= 1) {\r\n      select.classList.add('disabled');\r\n    }\r\n\r\n    const label = document.createElement('label');\r\n    label.htmlFor = selectId;\r\n    label.innerHTML = labelText;\r\n\r\n    container.append(label, select);\r\n\r\n    sanitizedElements.forEach((element) => {\r\n      select.append(\r\n          this.createOptionElement(getValue(element), getDisplayText(element), selectedClassification),\r\n      );\r\n    });\r\n\r\n    this.initDropdowns();\r\n  };\r\n\r\n  /**\r\n   * Populates a nested select (dropdown) element, grouping items under <optgroup>.\r\n   * @param {string} fieldId - The ID of the container element for this field.\r\n   * @param {string} selectId - The ID to assign to the created <select> element.\r\n   * @param {Array<any>} entries - An array of entries where each entry is typically [key, groupArray].\r\n   * @param {Function} getGroup - A function that returns the label for the <optgroup>.\r\n   * @param {Function} getValue - A function that returns the value attribute for an element.\r\n   * @param {Function} getDisplayText - A function that returns the display text for an element.\r\n   * @param {boolean} isSearch - If `true`, adds 'search' CSS class to the dropdown.\r\n   * @param {Function} onChange - The callback function to invoke on the dropdown's 'change' event.\r\n   * @param {string} labelText - The text to display in the associated <label>.\r\n   * @returns {void}\r\n   */\r\n  populateNestedSelect = (\r\n      fieldId,\r\n      selectId,\r\n      entries,\r\n      getGroup,\r\n      getValue,\r\n      getDisplayText,\r\n      isSearch,\r\n      onChange,\r\n      labelText,\r\n  ) => {\r\n    const container = document.getElementById(fieldId);\r\n    container.className = 'field';\r\n    container.innerHTML = '';\r\n\r\n    const select = document.createElement('select');\r\n    select.id = selectId;\r\n    select.className = 'ui dropdown' + (isSearch ? ' search': '');\r\n    select.addEventListener('change', onChange);\r\n    if (entries.length <= 1) {\r\n      select.classList.add('disabled');\r\n    }\r\n\r\n    const label = document.createElement('label');\r\n    label.htmlFor = selectId;\r\n    label.innerHTML = labelText;\r\n\r\n    container.append(label, select);\r\n\r\n    entries.forEach((entry) => {\r\n      const optgroup = document.createElement('optgroup');\r\n      optgroup.label = getGroup(entry);\r\n      select.append(optgroup);\r\n\r\n      entry[1].forEach((value) => {\r\n        optgroup.append(\r\n            this.createOptionElement(getValue(value), getDisplayText(value)),\r\n        );\r\n      });\r\n    });\r\n\r\n    this.initDropdowns();\r\n  };\r\n\r\n  /**\r\n   * Creates an <option> element for a select dropdown.\r\n   * @param {string|number} value - The value for the option element.\r\n   * @param {string} innerHtml - The text or HTML content to display inside the option.\r\n   * @param {string} selectedClassification\r\n   * @returns {HTMLOptionElement} The newly created option element.\r\n   */\r\n  createOptionElement = (value, innerHtml, selectedClassification) => {\r\n    const opt = document.createElement('option');\r\n    opt.value = value;\r\n    opt.innerHTML = innerHtml;\r\n    if (value === selectedClassification) {\r\n      opt.selected = true;\r\n    }\r\n    return opt;\r\n  };\r\n\r\n  /**\r\n   * Initializes all checkboxes (with Semantic UI styling) on the page.\r\n   * @returns {void}\r\n   */\r\n  initCheckboxes = () => {\r\n    $('.ui.checkbox').checkbox();\r\n  };\r\n\r\n  /**\r\n   * Initializes all dropdowns (with Semantic UI styling) on the page.\r\n   * @returns {void}\r\n   */\r\n  initDropdowns = () => {\r\n    $('.ui.dropdown').dropdown();\r\n  };\r\n}\r\n\r\n/**\r\n * Sanitizes the classification filter field by filtering and sorting the input data.\r\n * \"Total\" always at the start of the array\r\n * \"-1\" and \"-99\" removed from the array\r\n * The rest is sorted ascending by ID (as number)\r\n *\r\n * @param {Array} data - The input data array containing objects to be filtered and sorted.\r\n * @return {Array} The sanitized array with specific items removed and the remaining items sorted.\r\n */\r\nfunction sanitizeClassificationFilterField(data) {\r\n  const result = [];\r\n\r\n  const firstInArray = 'Total';\r\n  const toRemove = [\r\n    '99', // Nicht bestimmbar\r\n    '-1' // Keine Angabe\r\n  ];\r\n\r\n  const total = data.find(item => getIdOfDimension(item.value.value) === firstInArray);\r\n  result.push(total);\r\n\r\n  const filteredArray = data.filter((item) => {\r\n    if (\r\n        getIdOfDimension(item.value.value) !== firstInArray\r\n        && toRemove.includes(getIdOfDimension(item.value.value)) === false\r\n    ) {\r\n      return true;\r\n    }\r\n  })\r\n\r\n  const sortedArray = filteredArray.sort((a, b) => Number(getIdOfDimension(a.value.value)) > Number(getIdOfDimension(b.value.value)));\r\n  result.push(...sortedArray);\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Extracts and returns the ID of a dimension from a given IRI.\r\n *\r\n * @param {string} dimension - The dimension string in the format of segments separated by '/'.\r\n * @return {string} The ID of the dimension, which is the last segment of the given dimension string.\r\n */\r\nfunction getIdOfDimension(dimension) {\r\n  const array = dimension.split('/');\r\n  return array[array.length - 1];\r\n}", "import {VISUALIZE_URL} from '../config.js';\r\n\r\nexport class ChartService {\r\n  lang;\r\n  baseUrl;\r\n  container;\r\n  iframe;\r\n\r\n  /**\r\n   * @param {string} lang\r\n   * @param {string} baseUrl\r\n   * @param {HTMLDivElement} container\r\n   */\r\n  constructor(lang, baseUrl, container) {\r\n    this.lang = lang;\r\n    this.baseUrl = baseUrl;\r\n    this.container = container;\r\n  }\r\n\r\n  /**\r\n   * Create the iframe with the passed data\r\n   * @param data\r\n   */\r\n  createIframe(data) {\r\n    const iframe = document.createElement('iframe');\r\n    iframe.id = 'chart';\r\n    iframe.src = `${this.baseUrl}/${this.lang}/preview?flag__debug=true`;\r\n    iframe.onload = () => this.reloadIFrame(data);\r\n    this.iframe = iframe;\r\n\r\n    this.container.innerHTML = '';\r\n    this.container.append(iframe);\r\n  }\r\n\r\n  /**\r\n   * Reload the iframe with new data\r\n   * @param data\r\n   */\r\n  reloadIFrame(data) {\r\n    const iframeWindow = this.iframe?.contentWindow;\r\n    if (iframeWindow) {\r\n      iframeWindow.postMessage(data(), VISUALIZE_URL);\r\n    }\r\n  }\r\n\r\n  rerender() {\r\n    if (!this.iframe) {\r\n      return;\r\n    }\r\n    this.iframe.src += ''; // Hack to reload iframe\r\n  }\r\n}\r\n", "/**\r\n * A service class responsible for managing a stepper component (multi-step UI).\r\n * It provides methods to change the active step, navigate to the next or previous step,\r\n * and handle button states accordingly.\r\n */\r\nexport class StepperService {\r\n  /**\r\n   * An array representing the available steps.\r\n   * @type {number[]}\r\n   */\r\n  steps = [1, 2, 3, 4];\r\n\r\n  /**\r\n   * Changes the active step to the specified next step.\r\n   * It updates CSS classes for step indicators and the step content sections\r\n   * based on the new active step.\r\n   * @param {number} nextStep - The step number to change to.\r\n   * @returns {void}\r\n   */\r\n  changeStep = (nextStep) => {\r\n    this.steps.forEach((step) => {\r\n      ['step-indicator', 'step'].forEach((type) =>\r\n          document.getElementById(`${type}-${step}`).classList.toggle(\r\n              type === 'step-indicator' ? 'active' : 'in-active',\r\n              (type === 'step-indicator') ===\r\n              (`${type}-${step}` === `${type}-${nextStep}`),\r\n          ),\r\n      );\r\n    });\r\n    this.updateStepperButton(nextStep);\r\n  };\r\n\r\n  /**\r\n   * Moves to the next step if possible.\r\n   * @returns {void}\r\n   */\r\n  onNextStep = () => {\r\n    const currentStepNumber = this.getActiveStep();\r\n    if (currentStepNumber < this.steps.length) {\r\n      this.changeStep(currentStepNumber + 1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Moves to the previous step if possible.\r\n   * @returns {void}\r\n   */\r\n  onLastStep = () => {\r\n    const currentStepNumber = this.getActiveStep();\r\n    if (currentStepNumber > 1) {\r\n      this.changeStep(currentStepNumber - 1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieves the current active step by querying the DOM for the `.step.active` element.\r\n   * @returns {number} The number of the currently active step.\r\n   */\r\n  getActiveStep() {\r\n    const activeStep = document.querySelector(\r\n        '.ui.vertical.steps .step.active',\r\n    );\r\n    const currentStepNumber = parseInt(activeStep.id.split('-').pop(), 10);\r\n    return currentStepNumber;\r\n  }\r\n\r\n  /**\r\n   * Updates the state (enabled/disabled) of the step navigation buttons (Next, Previous)\r\n   * based on the current step.\r\n   * @param {number} currentStep - The step that is currently active.\r\n   * @returns {void}\r\n   */\r\n  updateStepperButton = (currentStep) => {\r\n    // Disable or enable buttons based on the step\r\n    const lastButton = document.getElementById('last-button');\r\n    const nextButton = document.getElementById('next-button');\r\n    lastButton.classList.toggle('disabled', currentStep === 1);\r\n    nextButton.classList.toggle('disabled', Number(currentStep) === this.steps.length);\r\n  };\r\n}\r\n", "import {getUrlParams} from '../util/shared.js'\r\nimport {DEBUG_LOGS} from '../config.js';\r\n\r\n/**\r\n * A service class responsible for managing URL parameters (filters) for the application.\r\n * It provides methods to retrieve, sort, add, and remove query parameters in the URL.\r\n */\r\nexport class UrlService {\r\n  /**\r\n   * A URLSearchParams-like object containing the current URL parameters.\r\n   * @type {URLSearchParams}\r\n   */\r\n  urlParams;\r\n\r\n  /**\r\n   * Constructs a new UrlService instance.\r\n   * Initializes the `urlParams` by reading the current URL hash.\r\n   */\r\n  constructor() {\r\n    this.urlParams = getUrlParams();\r\n  }\r\n\r\n  /**\r\n   * Retrieves all filters from the URL parameters and sorts them by a predefined order:\r\n   * ['mode', 'grouped-region', 'regionType', 'region', 'measure', 'classification'].\r\n   * Any parameters not in the predefined list are appended at the end.\r\n   * @returns {Array<[string, string]>} An array of key-value pairs in sorted order.\r\n   */\r\n  getSortedFiltersFromUrl = () => {\r\n    const sortOrder = [\r\n      'mode',\r\n      'grouped-classification',\r\n      'grouped-region',\r\n      'regionType',\r\n      'region',\r\n      'measure',\r\n      'classification',\r\n    ];\r\n    return Array.from(this.urlParams).sort(([keyA], [keyB]) => {\r\n      const priorityA = sortOrder.indexOf(keyA);\r\n      const priorityB = sortOrder.indexOf(keyB);\r\n\r\n      // Items not in sortOrder should be placed at the end\r\n      const adjustedPriorityA = priorityA > -1 ? priorityA : sortOrder.length;\r\n      const adjustedPriorityB = priorityB > -1 ? priorityB : sortOrder.length;\r\n\r\n      return adjustedPriorityA - adjustedPriorityB;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Removes a given filter from the URL parameters and updates the browser's address bar.\r\n   * @param {string} key - The name of the filter (URL parameter) to remove.\r\n   * @returns {void}\r\n   */\r\n  removeFilterInUrl = (key) => {\r\n    this.urlParams.delete(key);\r\n    // window.location.hash = decodeURIComponent(this.urlParams);\r\n    const updatedUrl = `${window.location.origin}${window.location.pathname}#${decodeURIComponent(this.urlParams)}`;\r\n    history.replaceState(null, '', updatedUrl);\r\n  };\r\n\r\n  /**\r\n   * Adds or updates a filter in the URL parameters and updates the browser's address bar.\r\n   * @param {string} key - The name of the filter (URL parameter) to add or update.\r\n   * @param {string|number|boolean} value - The value to assign to the specified filter.\r\n   * @returns {void}\r\n   */\r\n  putFilterInUrl = (key, value) => {\r\n    if (DEBUG_LOGS) {\r\n      console.log('set filter:', key, value);\r\n    }\r\n    this.urlParams.set(key, value);\r\n    // window.location.hash = decodeURIComponent(this.urlParams);\r\n    const updatedUrl = `${window.location.origin}${window.location.pathname}#${decodeURIComponent(this.urlParams)}`;\r\n    history.replaceState(null, '', updatedUrl);\r\n  };\r\n}\r\n", "/**\r\n * I18nService is responsible for handling internationalization and localization logic.\r\n */\r\nexport class I18nService {\r\n\r\n  /**\r\n   * An array containing the supported language codes for the application.\r\n   *\r\n   * @type {string[]}\r\n   */\r\n  supportedLanguages = ['de', 'fr', 'it', 'en'];\r\n\r\n  /**\r\n   * Configuration object containing multilingual translations for various terms used in the application.\r\n   * Each term supports translations in German (de), French (fr), Italian (it), and English (en).\r\n   * @type {Object}\r\n   */\r\n  config = {\r\n    filter: {\r\n      de: 'Schritte',\r\n      fr: '\u00C9tapes',\r\n      it: 'Passi',\r\n      en: 'Steps',\r\n    },\r\n    chart: {\r\n      de: 'Diagramm',\r\n      fr: 'Diagramme',\r\n      it: 'Diagramma',\r\n      en: 'Chart',\r\n    },\r\n    map: {\r\n      de: 'Karte',\r\n      fr: 'Carte',\r\n      it: 'Mappa',\r\n      en: 'Map',\r\n    },\r\n    topic: {\r\n      de: 'Thema',\r\n      fr: 'Sujet',\r\n      it: 'Tema',\r\n      en: 'Topic',\r\n    },\r\n    classification: {\r\n      de: 'Klassifizierungsmerkmal',\r\n      fr: 'Variable de classification',\r\n      it: 'Variabile di classificazione',\r\n      en: 'Classification variable',\r\n    },\r\n    region: {\r\n      de: 'Region',\r\n      fr: 'R\u00E9gion',\r\n      it: 'Regione',\r\n      en: 'Region',\r\n    },\r\n    canton: {\r\n      de: 'Kanton',\r\n      fr: 'Canton',\r\n      it: 'Cantone',\r\n      en: 'Canton',\r\n    },\r\n    switzerland: {\r\n      de: 'Schweiz',\r\n      fr: 'Suisse',\r\n      it: 'Svizzera',\r\n      en: 'Switzerland',\r\n    },\r\n    regionType: {\r\n      de: 'Regionsart',\r\n      fr: 'Type de r\u00E9gion',\r\n      it: 'Tipo di regione',\r\n      en: 'Region Type',\r\n    },\r\n    segmentation: {\r\n      de: 'Segmentierung',\r\n      fr: 'Segmentation',\r\n      it: 'Segmentazione',\r\n      en: 'Segmentation',\r\n    },\r\n    geography: {\r\n      de: 'Regionale Gliederung',\r\n      fr: 'D\u00E9coupage r\u00E9gional',\r\n      it: 'Suddivisione regionale',\r\n      en: 'Regional demarcation',\r\n    },\r\n    error: {\r\n      de: 'Etwas ist schief gelaufen. Bitte versuche es sp\u00E4ter.',\r\n      fr: 'Une erreur est survenue. Veuillez r\u00E9essayer plus tard.',\r\n      it: 'Si \u00E8 verificato un errore. Per favore riprova pi\u00F9 tardi.',\r\n      en: 'Something went wrong. Please try again later.',\r\n    },\r\n    next: {\r\n      de: 'Weiter',\r\n      fr: 'Suivant',\r\n      it: 'Avanti',\r\n      en: 'Next',\r\n    },\r\n    last: {\r\n      de: 'Zur\u00FCck',\r\n      fr: 'Dernier',\r\n      it: 'Ultimo',\r\n      en: 'Previous',\r\n    },\r\n    additionalFilters: {\r\n      de: 'Zus\u00E4tzliche Filter',\r\n      fr: 'Filtres suppl\u00E9mentaires',\r\n      it: 'Filtri aggiuntivi',\r\n      en: 'Additional filters',\r\n    },\r\n    visualizeLink: {\r\n      de: 'Auf visualize.admin.ch \u00F6ffnen',\r\n      fr: 'Ouvrir sur visualize.admin.ch',\r\n      it: 'Aprire su visualize.admin.ch',\r\n      en: 'Open on visualize.admin.ch',\r\n    },\r\n    resetButton: {\r\n      de: 'zur\u00FCcksetzen',\r\n      fr: 'r\u00E9initialiser',\r\n      it: 'resettare',\r\n      en: 'reset',\r\n    },\r\n    backlink: {\r\n      de: 'Zur\u00FCck',\r\n      fr: 'page pr\u00E9c\u00E9dente',\r\n      it: 'indietro',\r\n      en: 'back'\r\n    },\r\n    translatedPathname: {\r\n      de: '/de/ergebnisabfrage/visualize-viewer',\r\n      fr: '/fr/recherche-de-resultats/visualize-viewer',\r\n      it: '/it/ricerca-di-risultati/visualize-viewer',\r\n      en: '/en/result-query-system/visualize-viewer',\r\n    },\r\n    backlinkHref: {\r\n      de: '/de/ergebnisabfrage/visualize',\r\n      fr: '/fr/recherche-de-resultats/visualize',\r\n      it: '/it/ricerca-di-risultati/visualize',\r\n      en: '/en/result-query-system/visualize',\r\n    },\r\n    backlinkTitle: {\r\n      de: 'Zur\u00FCck zur vorherigen Seite',\r\n      fr: 'Retour \u00E0 la page pr\u00E9c\u00E9dente',\r\n      it: 'Indietro alla pagina precedente',\r\n      en: 'Back to the previous page'\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieves the language from the provided URL parameters.\r\n   *\r\n   * @param {URLSearchParams} urlParams - The URLSearchParams object containing query parameters.\r\n   * @param {string|null} environment\r\n   * @returns {string} The resolved language, either from the 'lang' parameter or the fallback.\r\n   */\r\n  getLanguageFromUrl = (urlParams, environment) => {\r\n    let pageLanguageLFI;\r\n    /**\r\n     * Special configuration for NFI\r\n     */\r\n    if (environment === 'nfi') {\r\n      pageLanguageLFI = this.evaluateFromNFIUrl();\r\n    }\r\n    const fallbackLanguage = 'de';\r\n    let language = pageLanguageLFI ?? urlParams.get('lang') ?? fallbackLanguage;\r\n    return this.isValidLanguage(language) ? language : 'de';\r\n  };\r\n\r\n  /**\r\n   * Get the lang string from the NFI website URL\r\n   *\r\n   * @function\r\n   * @returns {string} The second segment from the URL's pathname.\r\n   */\r\n  evaluateFromNFIUrl = () => {\r\n    const pathParts = window.location.pathname.split('/');\r\n    return pathParts[1];\r\n  };\r\n\r\n  /**\r\n   * Updates the elements with the specified class name 'lang' to reflect the currently active language.\r\n   *\r\n   * @param {string} value - The value representing the language to set as active.\r\n   */\r\n  setLanguage = (value) => {\r\n    document.querySelectorAll('.lang').forEach((item) => {\r\n      item.classList.toggle(\r\n          'active',\r\n          value.toLocaleUpperCase() === item.innerHTML,\r\n      );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Checks if the provided value is a valid language.\r\n   *\r\n   * @param {string} value - The language value to validate.\r\n   * @returns {boolean} True if the value is a valid language, otherwise false.\r\n   */\r\n  isValidLanguage = (value) => {\r\n    return this.supportedLanguages.includes(value);\r\n  };\r\n\r\n  /**\r\n   * Updates the text content of various UI elements to display in the specified language.\r\n   *\r\n   * @param {string} environment - The env, f.e. NFI or BLW\r\n   * @param {string} lang - The language to set for the UI text. This should match a key in the `config` object for localized text.\r\n   * @returns {void}\r\n   */\r\n  updateLanguageDisplay = (environment, lang) => {\r\n    document.getElementById('filter-label').innerHTML = this.config.filter[lang];\r\n    document.getElementById('chart-button').innerHTML = `<i class=\"chart bar icon\"></i>${this.config.chart[lang]}`;\r\n    document.getElementById('map-button').innerHTML = `<i class=\"map icon\"></i>${this.config.map[lang]}`;\r\n    document.getElementById('segmentation-label-region').innerHTML = this.config.segmentation[lang];\r\n    document.getElementById('last-button-label').innerHTML = this.config.last[lang];\r\n    document.getElementById('next-button-label').innerHTML = this.config.next[lang];\r\n    document.getElementById('topic-step').innerHTML = this.config.topic[lang];\r\n    document.getElementById('classification-step').innerHTML = this.config.classification[lang];\r\n    document.getElementById('additional-filters-step').innerHTML = this.config.additionalFilters[lang];\r\n    document.getElementById('geography-step').innerHTML = this.config.geography[lang];\r\n    document.getElementById('step-title-1').innerHTML = this.config.topic[lang];\r\n    document.getElementById('step-title-2').innerHTML = this.config.classification[lang];\r\n    document.getElementById('step-title-3').innerHTML = this.config.additionalFilters[lang];\r\n    document.getElementById('step-title-4').innerHTML = this.config.geography[lang];\r\n    document.getElementById('visualize-link').innerHTML = this.config.visualizeLink[lang];\r\n    document.getElementById('reset-button').title = this.config.resetButton[lang];\r\n\r\n    const backlink = document.getElementById('backlink');\r\n    if (backlink) {\r\n      backlink.innerHTML = this.config.backlink[lang];\r\n      backlink.title = this.config.backlinkTitle[lang];\r\n      backlink.href = window.location.origin + this.config.backlinkHref[lang];\r\n    }\r\n\r\n    /**\r\n     * Special configuration for NFI\r\n     */\r\n    if (environment === 'nfi') {\r\n      this.translateURL(lang);\r\n      this.setLogoLink(lang);\r\n    } else {\r\n      if (backlink) {\r\n        backlink.remove();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * On language change, the pathname in the URL should also be updated\r\n   *\r\n   * @param {string} lang\r\n   */\r\n  translateURL = (lang) => {\r\n    const updatedUrl = `${window.location.origin}${this.config.translatedPathname[lang]}#${window.location.hash}`;\r\n    history.replaceState(null, '', updatedUrl);\r\n  }\r\n\r\n  setLogoLink = (lang) => {\r\n    const logolink = document.getElementById('logo-link');\r\n    if (logolink) {\r\n      logolink.href = '/' + lang;\r\n    }\r\n  }\r\n}\r\n", "import {LINDAS_CACHED_ENDPOINT} from \"../config.js\";\r\n\r\n/**\r\n * A collection of SPARQL query-generating functions and a helper function to execute\r\n * those queries against a predefined SPARQL endpoint.\r\n */\r\n\r\n/**\r\n * An object containing functions that return SPARQL queries for various\r\n * data retrieval needs (e.g., properties, region hierarchy).\r\n */\r\nexport const queries = {\r\n  /**\r\n   * Returns a SPARQL query string that retrieves key dimension options\r\n   * for the specified language.\r\n   *\r\n   * @function getPropertiesOptions\r\n   * @param {string} lang - The language code (e.g., 'en', 'de', 'fr') for filtering\r\n   *   results based on language-specific labels.\r\n   * @returns {string} A SPARQL query for retrieving properties options.\r\n   */\r\n  getPropertiesOptions: (lang) => `\r\n    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\r\n    PREFIX sh: <http://www.w3.org/ns/shacl#>\r\n    PREFIX schema: <http://schema.org/>\r\n    PREFIX cube: <https://cube.link/>\r\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n    SELECT DISTINCT ?dimPath ?dimName ?value ?valueName\r\n    FROM <https://lindas.admin.ch/foen/nfi>\r\n    FROM <https://lindas.admin.ch/cube/dimension>\r\n    WHERE {\r\n        ?cube \r\n          a cube:Cube ;\r\n          cube:observationConstraint ?shape .\r\n        \r\n        FILTER NOT EXISTS { ?cube schema:expires ?ex . }\r\n        \r\n        ?shape sh:property ?dim .\r\n        ?dim \r\n          schema:name ?dimName ;\r\n          sh:path ?dimPath ;\r\n          rdf:type ?dimType ;\r\n          sh:in/rdf:rest*/rdf:first ?value .\r\n      \r\n        ?value schema:name ?valueName .\r\n    \r\n        FILTER (LANGMATCHES(LANG(?valueName), \"${lang}\"))\r\n        FILTER (LANGMATCHES(LANG(?dimName), \"${lang}\"))\r\n        FILTER(?dimType = cube:KeyDimension)\r\n        FILTER(?dimPath NOT IN (cube:observedBy))\r\n        FILTER(?cube NOT IN (<https://environment.ld.admin.ch/foen/nfi/nfi_T-changes/cube/2024-1>))\r\n    }\r\n    ORDER BY ?dimPath\r\n    LIMIT 10000\r\n  `,\r\n\r\n  /**\r\n   * Returns a SPARQL query string that retrieves cubes and their dimensions\r\n   * for the specified language.\r\n   *\r\n   * @function getPropertiesForCubes\r\n   * @param {string} lang - The language code (e.g., 'en', 'de', 'fr') for filtering\r\n   *   results based on language-specific labels.\r\n   * @returns {string} A SPARQL query for retrieving cubes and their dimensions.\r\n   */\r\n  getPropertiesForCubes: (lang) => `\r\n    PREFIX meta: <https://cube.link/meta/>\r\n    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\r\n    PREFIX sh: <http://www.w3.org/ns/shacl#>\r\n    PREFIX schema: <http://schema.org/>\r\n    PREFIX cube: <https://cube.link/>\r\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n    SELECT DISTINCT ?cube ?cubeName ?dimName ?dimPath ?dimType WHERE {\r\n      GRAPH <https://lindas.admin.ch/foen/nfi> {\r\n        ?cube a cube:Cube ;\r\n          schema:name ?cubeName ;\r\n          cube:observationConstraint ?shape .\r\n        \r\n        FILTER NOT EXISTS { ?cube schema:expires ?ex . }\r\n        \r\n        ?shape sh:property ?dim .\r\n        ?dim schema:name ?dimName ;\r\n          sh:path ?dimPath ;\r\n          rdf:type ?dimType .\r\n        \r\n        FILTER(LANG(?dimName) = \"${lang}\")\r\n        FILTER(LANG(?cubeName) = \"${lang}\")\r\n        FILTER(?dimPath NOT IN (cube:observedBy, <https://environment.ld.admin.ch/foen/nfi/inventory>, <https://environment.ld.admin.ch/foen/nfi/unitOfReference>))\r\n        FILTER(?cube NOT IN (<https://environment.ld.admin.ch/foen/nfi/nfi_T-changes/cube/2024-1>))\r\n      }\r\n    }\r\n    ORDER BY ?dimName\r\n    LIMIT 10000\r\n  `,\r\n\r\n  /**\r\n   * Returns a SPARQL query string that retrieves a region hierarchy\r\n   * for the specified language.\r\n   *\r\n   * @function getRegionHierarchy\r\n   * @param {string} lang - The language code (e.g., 'en', 'de', 'fr') for filtering\r\n   *   results based on language-specific labels.\r\n   * @returns {string} A SPARQL query for retrieving the region hierarchy.\r\n   */\r\n  getRegionHierarchy: (lang) => `\r\n    PREFIX meta: <https://cube.link/meta/>\r\n    PREFIX dcterms: <http://purl.org/dc/terms/>\r\n    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\r\n    PREFIX sh: <http://www.w3.org/ns/shacl#>\r\n    PREFIX schema: <http://schema.org/>\r\n    PREFIX cube: <https://cube.link/>\r\n    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n    \r\n    SELECT DISTINCT ?value ?valueName ?type ?typeName\r\n    WHERE {\r\n      GRAPH <https://lindas.admin.ch/foen/nfi> {\r\n        { SELECT DISTINCT ?value ?root WHERE {\r\n          FILTER NOT EXISTS { ?cube schema:expires ?ex . }\r\n          ?cube a cube:Cube ;\r\n                cube:observationConstraint ?shape .\r\n          ?shape sh:property ?dim .\r\n          ?dim sh:path <https://environment.ld.admin.ch/foen/nfi/unitOfReference> ;\r\n               meta:inHierarchy/meta:hierarchyRoot ?root ;\r\n               sh:in/rdf:rest*/rdf:first ?value .\r\n        }}\r\n        OPTIONAL {\r\n          ?value ^schema:about ?group .\r\n          ?group <https://environment.ld.admin.ch/foen/nfi/subjectOf> ?root ;\r\n                  schema:name ?groupName.\r\n          FILTER (langMatches(lang(?groupName), \"${lang}\"))\r\n        }\r\n     }\r\n     ?value schema:name ?valueName .\r\n     FILTER (langMatches(lang(?valueName), \"${lang}\"))\r\n     BIND (COALESCE(?groupName, ?valueName) AS ?typeName)\r\n     BIND (COALESCE(?group, schema:Country) AS ?type)\r\n    }\r\n    ORDER BY ?type ?valueName\r\n    LIMIT 1000\r\n  `,\r\n};\r\n\r\n/**\r\n * Executes a SPARQL query against the LINDAS_CACHED_ENDPOINT, returning the results in JSON format.\r\n *\r\n * @async\r\n * @function queryLindas\r\n * @param {string} query - The SPARQL query string to execute.\r\n * @returns {Promise<Object>} A promise resolving to the JSON results of the query.\r\n */\r\nexport async function queryLindas(query) {\r\n  const response = await fetch(LINDAS_CACHED_ENDPOINT, {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/sparql-results+json',\r\n      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n    },\r\n    body: new URLSearchParams({query}).toString(),\r\n  });\r\n\r\n  return response.json();\r\n}\r\n", "import {CLASSIFICATIONS_TO_IGNORE, DEFAULT_TOPIC} from '../config.js';\r\nimport {queries, queryLindas} from '../util/QueryUtil.js';\r\nimport {onUpdateClassification, onUpdateMeasure, onUpdateFilter, cssifyString, evaluateCube} from '../util/shared.js';\r\nimport '../types.js';\r\n\r\n/**\r\n * The URL for the classification dimension.\r\n * @constant {string}\r\n */\r\nconst classificationUnit =\r\n    'https://environment.ld.admin.ch/foen/nfi/classificationUnit';\r\n\r\n/**\r\n * A service class that manages property data, selections, and UI interactions for a chart.\r\n */\r\nexport class PropertyService {\r\n  lfiViewer;\r\n\r\n  /**\r\n   * The selected language.\r\n   * @type {string}\r\n   */\r\n  lang;\r\n\r\n  /**\r\n   * The properties object containing key dimensions and measures.\r\n   * @type {{ keys: Array<Measure>, measures: Array<Measure> }}\r\n   */\r\n  properties;\r\n\r\n  /**\r\n   * The currently selected measure object.\r\n   * @type {Measure}\r\n   */\r\n  measure;\r\n\r\n  /**\r\n   * @type {Array<string>}\r\n   */\r\n  classificationDimensions = [];\r\n\r\n  /**\r\n   * The currently selected cube URL.\r\n   * @type {string}\r\n   */\r\n  cube;\r\n\r\n  /**\r\n   * The currently selected dimension path (used for the Y-axis).\r\n   * @type {string}\r\n   */\r\n  yAxis;\r\n\r\n  /**\r\n   * Creates a new instance of the PropertyService.\r\n   * @param {LfiViewer} lfiViewer\r\n   * @param {string} lang - The language code (e.g., 'en', 'de', 'fr').\r\n   * @param {Object} uiAccessService - A service for manipulating the UI (populating selects, etc.).\r\n   * @param {Object} urlService - A service for managing URL filters.\r\n   * @param {Object} chartService - A service for re-rendering the chart.\r\n   * @param {Object} i18nService - A service for internationalization configuration.\r\n   */\r\n  constructor(lfiViewer, lang, uiAccessService, urlService, chartService, i18nService) {\r\n    this.lfiViewer = lfiViewer;\r\n    this.lang = lang;\r\n    this.properties = {keys: [], measures: []};\r\n    this.uiAccessService = uiAccessService;\r\n    this.urlService = urlService;\r\n    this.chartService = chartService;\r\n    this.i18nService = i18nService;\r\n  }\r\n\r\n  /**\r\n   * Sets the currently selected measure.\r\n   * Updates the cube, Y-axis, and URL filters accordingly.\r\n   * @param {string} measure - The ID of the measure to set.\r\n   * @returns {boolean} Returns `true` if measure is set successfully, otherwise `false`.\r\n   */\r\n  setMeasure = (measure) => {\r\n    const populatedMeasures = this.properties.measures.filter(\r\n        (prop) => prop.id === measure,\r\n    );\r\n    if (!populatedMeasures) {\r\n      this.urlService.removeFilterInUrl('measure');\r\n      return false;\r\n    }\r\n\r\n    this.measure = evaluateCube(populatedMeasures);\r\n    this.cube = this.measure.cube.value;\r\n    this.yAxis = this.measure.dimPath.value;\r\n\r\n    this.urlService.putFilterInUrl('measure', this.yAxis);\r\n    // this.urlService.removeFilterInUrl('classification');\r\n\r\n    this.populateClassificationSelect();\r\n    this.chartService.rerender();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Sets the classification (key dimension) for the currently selected measure.\r\n   * Updates the cube, Y-axis, and URL filters accordingly.\r\n   * @param {string} propertyId - The ID of the classification property to set.\r\n   * @returns {boolean} Returns `true` if classification is set successfully, otherwise `false`.\r\n   */\r\n  setClassification = (propertyId) => {\r\n    const key = this.properties.keys.find((m) => m.id === propertyId);\r\n    if (!key) {\r\n      this.urlService.removeFilterInUrl('classification');\r\n      return false;\r\n    }\r\n\r\n    this.cube = key.cube.value;\r\n\r\n    let parentMeasure = this.getMeasureDimensions().find(\r\n        (m) => m.dimName.value === this.measure.dimName.value,\r\n    );\r\n    if (!parentMeasure) {\r\n      // wrong classification for measure\r\n      this.urlService.removeFilterInUrl('classification');\r\n      this.setClassification(this.getCubesForMeasure()[0]);\r\n      return false;\r\n    }\r\n\r\n    this.yAxis = parentMeasure.dimPath.value;\r\n\r\n    this.urlService.putFilterInUrl('classification', this.cube);\r\n\r\n    this.populateFilterSelects();\r\n    this.chartService.rerender();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Fetches property data (both key dimensions and measure dimensions) from a remote endpoint.\r\n   * Populates the `properties` object with the fetched data.\r\n   * @async\r\n   * @returns {Promise<void>} A promise that resolves when properties have been fetched and populated.\r\n   */\r\n  fetchProperties = async () => {\r\n    const response = await queryLindas(\r\n        queries.getPropertiesForCubes(this.lang),\r\n    );\r\n    const props = response.results.bindings;\r\n\r\n    const sortByDimPath = (a, b) =>\r\n        a.dimPath.value.localeCompare(b.dimPath.value);\r\n\r\n    this.properties.keys = props.filter(\r\n        (prop) => prop.dimType.value === 'https://cube.link/KeyDimension').\r\n        sort(sortByDimPath).\r\n        map((prop) => ({...prop, id: prop.cube.value, options: []}));\r\n\r\n    this.properties.measures = props.filter(\r\n        (prop) => prop.dimType.value === 'https://cube.link/MeasureDimension',\r\n    ).sort(sortByDimPath).map((prop) => ({...prop, id: prop.dimPath.value}));\r\n\r\n    // Set initial measure and cube properties\r\n    const measures = this.properties.measures.filter((m) => m.dimPath.value === DEFAULT_TOPIC);\r\n    this.measure = evaluateCube(measures);\r\n    this.cube = this.measure.cube.value;\r\n    this.yAxis = this.measure.dimPath.value;\r\n  };\r\n\r\n  /**\r\n   * Fetches the available options for each key dimension property and assigns them to the corresponding property.\r\n   * @async\r\n   * @returns {Promise<void>} A promise that resolves when property options have been fetched and assigned.\r\n   */\r\n  fetchPropertiesOptions = async () => {\r\n    const response = await queryLindas(queries.getPropertiesOptions(this.lang));\r\n    let options = response.results.bindings;\r\n\r\n    // Sort options with \"Total\" at the top\r\n    options.sort((a, b) =>\r\n        a.valueName.value === 'Total'\r\n            ? -1\r\n            : b.valueName.value === 'Total'\r\n                ? 1\r\n                : ('' + a).localeCompare(b),\r\n    );\r\n\r\n    // Add options to the corresponding property keys\r\n    options.forEach((option) => {\r\n      this.properties.keys.filter(\r\n          (prop) => prop.dimName.value === option.dimName.value).\r\n          forEach((prop) => prop.options.push(option));\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Gets all cube URLs associated with the current measure (based on dimName).\r\n   * @returns {string[]} An array of cube URLs for the current measure.\r\n   */\r\n  getCubesForMeasure = () => {\r\n    return this.properties.measures.filter(\r\n        (m) => m.dimName.value === this.measure.dimName.value).\r\n        map((m) => m.cube.value);\r\n  };\r\n\r\n  /**\r\n   * Gets all key dimensions (properties) for a given cube.\r\n   * If no cube is provided, it uses the currently selected cube.\r\n   * The classification dimension (classificationUnit) is always placed at the start.\r\n   * @param {string} [cube] - The cube value to get the key dimensions for. Defaults to the current cube if not provided.\r\n   * @returns {Object[]} An array of key dimension objects for the specified or current cube.\r\n   */\r\n  getKeyDimensionsForCube = (cube = undefined) => {\r\n    // Always put the classification at the start\r\n    const result = this.properties.keys.filter(\r\n        (k) => k.cube.value === (cube ?? this.cube)).sort((a, b) =>\r\n        a.dimPath.value ===\r\n        'https://environment.ld.admin.ch/foen/nfi/classificationUnit'\r\n            ? -1\r\n            : b.dimPath.value ===\r\n            'https://environment.ld.admin.ch/foen/nfi/classificationUnit'\r\n                ? 1\r\n                : a.dimPath.value.localeCompare(b.dimPath.value),\r\n    );\r\n\r\n    // TODO: This is called various times, where could I move it?\r\n    this.classificationDimensions = [];\r\n    const classificationDimensions = result.find((element) => element.cube.value === this.cube);\r\n    if (classificationDimensions) {\r\n      classificationDimensions.options.forEach((option) => {\r\n        if (this.classificationDimensions.includes(option.value.value) === false) {\r\n          this.classificationDimensions.push(option.value.value);\r\n        }\r\n      })\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Gets all measure dimensions (properties) for the currently selected cube.\r\n   * @returns {Object[]} An array of measure dimension objects.\r\n   */\r\n  getMeasureDimensions = () => {\r\n    return this.properties.measures.filter((k) => k.cube.value === this.cube);\r\n  };\r\n\r\n  /**\r\n   * Populates the measure select dropdown with unique measures (by `dimName.value`) and sets up an update callback.\r\n   * Uses the UI access service to manipulate the DOM.\r\n   * @returns {void}\r\n   */\r\n  populateMeasureSelect = () => {\r\n    // Filter duplicates based on dimName.value\r\n    const uniqueMeasures = [\r\n      ...new Map(\r\n          this.properties.measures.map((measure) => [\r\n            measure.dimName.value,\r\n            measure,\r\n          ]),\r\n      ).values(),\r\n    ];\r\n\r\n    this.uiAccessService.populateSelect(\r\n        'topic-field',\r\n        'measures',\r\n        uniqueMeasures,\r\n        (measure) => measure.id,\r\n        (measure) => measure.dimName.value,\r\n        true,\r\n        (event) => { onUpdateMeasure(this.lfiViewer, event); },\r\n        this.i18nService.config.topic[this.lang],\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Populates the classification select dropdown with any key dimensions related to `classificationUnit`\r\n   * and calls `populateFilterSelects` to set up the rest of the UI.\r\n   * @returns {void}\r\n   */\r\n  populateClassificationSelect = () => {\r\n    // Get key dimensions related to classificationUnit\r\n    let classificationKeys = this.getCubesForMeasure().flatMap((cube) =>\r\n        this.getKeyDimensionsForCube(cube).filter(\r\n            (key) =>\r\n                key.dimPath.value ===\r\n                'https://environment.ld.admin.ch/foen/nfi/classificationUnit',\r\n        ),\r\n    );\r\n\r\n    classificationKeys = classificationKeys.filter((element) => {\r\n      return CLASSIFICATIONS_TO_IGNORE.includes(element.cube.value) === false;\r\n    })\r\n\r\n    this.uiAccessService.populateSelect(\r\n        'classification-field',\r\n        'classification',\r\n        classificationKeys,\r\n        (key) => key.id,\r\n        (key) => key.dimName.value,\r\n        true,\r\n        (event) => { onUpdateClassification(this.lfiViewer, event); },\r\n        this.i18nService.config.classification[this.lang],\r\n        this.cube,\r\n    );\r\n\r\n    // Call setupFilterSelects to finalize UI setup\r\n    this.populateFilterSelects();\r\n  };\r\n\r\n  /**\r\n   * Populates the filter selects (other than classification) based on the current cube.\r\n   * Classification (if present) will go into a separate container, others go into the main filters container.\r\n   * @returns {void}\r\n   */\r\n  populateFilterSelects = () => {\r\n    const filterDiv = document.getElementById('filters');\r\n    filterDiv.innerHTML = '';\r\n\r\n    const classificationDiv = document.getElementById('classification-filter');\r\n    classificationDiv.innerHTML = '';\r\n\r\n    const keyDimensionsForCube = this.getKeyDimensionsForCube();\r\n\r\n    keyDimensionsForCube.forEach((property) => {\r\n      const filter = cssifyString(property.dimPath.value);\r\n      const filterId = `${filter}-filter`;\r\n      const containerId = `${filterId}-field`;\r\n\r\n      const div = document.createElement('div');\r\n      div.className = 'field';\r\n      div.id = containerId;\r\n\r\n      if (filter === classificationUnit) {\r\n        classificationDiv.append(div);\r\n      } else {\r\n        filterDiv.append(div);\r\n      }\r\n\r\n      this.uiAccessService.populateSelect(\r\n          containerId,\r\n          filterId,\r\n          property.options,\r\n          (option) => option.value.value,\r\n          (option) => option.valueName.value,\r\n          false,\r\n          (event) => { onUpdateFilter(this.lfiViewer, event); },\r\n          property.dimName.value,\r\n      );\r\n    });\r\n  };\r\n}\r\n", "import {queries, queryLindas} from '../util/QueryUtil.js';\r\nimport {onUpdateRegion, onUpdateRegionType} from '../util/shared.js';\r\n\r\n/**\r\n * A service for managing region-related data, including fetching and storing available regions,\r\n * as well as handling the currently selected region and region type.\r\n */\r\nexport class RegionService {\r\n\r\n  lfiViewer;\r\n\r\n  /**\r\n   * The current language.\r\n   * @type {string}\r\n   */\r\n  lang;\r\n\r\n  /**\r\n   * The currently selected region object.\r\n   * @type {Object}\r\n   */\r\n  selectedRegion;\r\n\r\n  /**\r\n   * The currently selected region type.\r\n   * (Regionsart (Bei Segmentierung))\r\n   * @type {string}\r\n   */\r\n  selectedRegionType;\r\n\r\n  /**\r\n   * An object containing all regions, grouped by type.\r\n   * @type {Object<string, Object[]>}\r\n   */\r\n  regions;\r\n\r\n  /**\r\n   * Constructs a new RegionService.\r\n   * @param {LfiViewer} lfiViewer\r\n   * @param {string} lang - The language code (e.g., 'en', 'de').\r\n   * @param {Object} uiAccessService - A service responsible for UI interactions.\r\n   * @param {Object} urlService - A service for managing URL parameters.\r\n   * @param {Object} chartService - A service for re-rendering charts.\r\n   * @param {Object} i18nService - A service for internationalization.\r\n   */\r\n  constructor(lfiViewer, lang, uiAccessService, urlService, chartService, i18nService) {\r\n    this.lfiViewer = lfiViewer;\r\n    this.lang = lang;\r\n    this.uiAccessService = uiAccessService;\r\n    this.urlService = urlService;\r\n    this.chartService = chartService;\r\n    this.i18nService = i18nService;\r\n  }\r\n\r\n  /**\r\n   * Fetches a list of regions from a remote endpoint and groups them by region type.\r\n   * Also sets default region and region type selections.\r\n   * @async\r\n   * @returns {Promise<void>} A promise that resolves once the regions are fetched and processed.\r\n   */\r\n  fetchRegions = async () => {\r\n    const response = await queryLindas(queries.getRegionHierarchy(this.lang));\r\n    const regions = response.results.bindings;\r\n\r\n    // Group regions by type\r\n    this.regions = Object.groupBy(regions, (region) => region.type.value);\r\n\r\n    // Set name for each region type\r\n    Object.values(this.regions).forEach((regionArray) => {\r\n      regionArray.name = regionArray[0].typeName.value;\r\n    });\r\n\r\n    // Preselect Switzerland (Country) and Canton region type\r\n    this.selectedRegion = this.regions['http://schema.org/Country'][0];\r\n    this.selectedRegionType =\r\n        'https://environment.ld.admin.ch/foen/nfi/Cantons';\r\n  };\r\n\r\n  /**\r\n   * Updates the currently selected region.\r\n   * If the region is invalid, it removes the 'region' filter from the URL.\r\n   * @param {string} region - The value of the region to select.\r\n   * @returns {boolean} Returns `true` if the region was successfully set, otherwise `false`.\r\n   */\r\n  setRegion = (region) => {\r\n    // As regions are structured to show the hierarchy, we need to flatten them first to find the right region\r\n    const newRegion = Object.values(this.regions).\r\n        flat().\r\n        find((reg) => reg.value.value === region);\r\n\r\n    if (!newRegion) {\r\n      this.urlService.removeFilterInUrl('region');\r\n      return false;\r\n    }\r\n\r\n    this.selectedRegion = newRegion;\r\n    this.urlService.putFilterInUrl('region', this.selectedRegion.value.value);\r\n    this.chartService.rerender();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Updates the currently selected region type.\r\n   * If the region type is invalid, it removes the 'regionType' filter from the URL.\r\n   * @param {string} regionType - The value of the region type to select.\r\n   * @returns {boolean} Returns `true` if the region type was successfully set, otherwise `false`.\r\n   */\r\n  setRegionType = (regionType) => {\r\n    const regionTypeValid = Object.keys(this.regions).includes(regionType);\r\n    if (!regionTypeValid) {\r\n      this.urlService.removeFilterInUrl('regionType');\r\n      return false;\r\n    }\r\n\r\n    this.selectedRegionType = regionType;\r\n    this.urlService.putFilterInUrl('regionType', this.selectedRegionType);\r\n    this.chartService.rerender();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Populates UI selects for regions and region types, leveraging the UI access service.\r\n   * Uses a nested select for regions and a standard select for region types.\r\n   * @returns {void}\r\n   */\r\n  populateRegionSelect = () => {\r\n    const regionEntries = Object.entries(this.regions);\r\n\r\n    this.uiAccessService.populateNestedSelect(\r\n        'region-field',\r\n        'region',\r\n        regionEntries,\r\n        ([_, regionArray]) => regionArray.name,\r\n        (region) => region.value.value,\r\n        (region) => region.valueName.value,\r\n        true,\r\n        (event) => { onUpdateRegion(this.lfiViewer, event); },\r\n        this.i18nService.config.region[this.lang],\r\n    );\r\n\r\n    this.uiAccessService.populateSelect(\r\n        'region-type-field',\r\n        'region-type',\r\n        regionEntries,\r\n        ([regionKey]) => regionKey,\r\n        ([_, regionArray]) => regionArray.name,\r\n        false,\r\n        (event) => { onUpdateRegionType(this.lfiViewer, event); },\r\n        this.i18nService.config.regionType[this.lang],\r\n    );\r\n  };\r\n}\r\n", "/**\r\n * A service class responsible for managing the visualization mode (chart or map)\r\n * and whether the data should be grouped by region types. It also updates the UI\r\n * and triggers re-rendering whenever these values change.\r\n */\r\nexport class VisualizationService {\r\n  /**\r\n   * The current visualization mode, either 'chart' or 'map'.\r\n   * @type {string}\r\n   */\r\n  mode = 'chart';\r\n\r\n  /**\r\n   * Indicates whether the data should be grouped by region types.\r\n   * @type {boolean|undefined}\r\n   */\r\n  groupedRegion;\r\n\r\n  /**\r\n   * Indicates whether the data should be grouped by classifications.\r\n   * @type {boolean|undefined}\r\n   */\r\n  groupedClassification;\r\n\r\n  /**\r\n   * A computed property that returns `true` if region types should be displayed\r\n   * (i.e., if grouping is enabled or if mode is 'map').\r\n   * @type {boolean}\r\n   * @readonly\r\n   */\r\n  get displayRegionTypes() {\r\n    return this.groupedRegion || this.mode === 'map';\r\n  }\r\n\r\n  /**\r\n   * A computed property that returns `true` if region types should be displayed\r\n   * (i.e., if grouping is enabled or if mode is 'map').\r\n   * @type {boolean}\r\n   * @readonly\r\n   */\r\n  get displayClassificationTypes() {\r\n    return this.groupedClassification || this.mode !== 'map';\r\n  }\r\n\r\n  /**\r\n   * Constructs a new VisualizationService instance.\r\n   * @param {Object} uiAccessService - The UI service for toggling UI elements.\r\n   * @param {Object} urlService - The URL service for reading/updating URL parameters.\r\n   * @param {Object} chartService - The chart service for re-rendering the visualization.\r\n   */\r\n  constructor(uiAccessService, urlService, chartService) {\r\n    this.uiAccessService = uiAccessService;\r\n    this.urlService = urlService;\r\n    this.chartService = chartService;\r\n  }\r\n\r\n  /**\r\n   * Sets the visualization mode to either 'chart' or 'map'.\r\n   * If the specified mode is invalid, removes 'mode' from the URL.\r\n   * Otherwise, updates the mode in the URL, sets the internal mode state,\r\n   * updates the UI, and triggers a chart re-render.\r\n   * @param {string} mode - The desired visualization mode ('chart' or 'map').\r\n   * @returns {void}\r\n   */\r\n  setMode = (mode) => {\r\n    if (!['chart', 'map'].includes(mode)) {\r\n      this.urlService.removeFilterInUrl('mode');\r\n      return;\r\n    }\r\n\r\n    this.urlService.putFilterInUrl('mode', mode);\r\n    this.mode = mode;\r\n\r\n    this.uiAccessService.setGroupedRegion(this.displayRegionTypes);\r\n    this.uiAccessService.setMode(mode);\r\n\r\n    this.chartService.rerender();\r\n  };\r\n\r\n  setGroupedClassification = (groupedClassification) => {\r\n    if (groupedClassification !== true && groupedClassification !== false) {\r\n      groupedClassification = false;\r\n    }\r\n\r\n    this.groupedClassification = groupedClassification;\r\n\r\n    this.urlService.putFilterInUrl('grouped-classification', groupedClassification);\r\n    this.uiAccessService.setGroupedClassification(groupedClassification);\r\n\r\n    this.chartService.rerender();\r\n  };\r\n\r\n  /**\r\n   * Sets the grouped state. If the provided value is not strictly boolean, defaults to false.\r\n   * Updates the URL, toggles grouping in the UI, and triggers a re-render.\r\n   * @param {boolean} groupedRegion - Whether to group data by region types.\r\n   * @returns {void}\r\n   */\r\n  setGroupedRegion = (groupedRegion) => {\r\n    if (groupedRegion !== true && groupedRegion !== false) {\r\n      groupedRegion = false;\r\n    }\r\n\r\n    this.groupedRegion = groupedRegion;\r\n\r\n    this.urlService.putFilterInUrl('grouped-region', groupedRegion);\r\n    this.uiAccessService.setGroupedRegion(this.displayRegionTypes);\r\n\r\n    this.chartService.rerender();\r\n  };\r\n}\r\n", "import {DEBUG_LOGS} from '../config.js';\r\nimport {cssifyString} from '../util/shared.js';\r\n\r\n/**\r\n * A service class responsible for managing the various filters used in the application.\r\n * It coordinates with other services to update filter states, reflect them in the URL,\r\n * and re-render the visualization accordingly.\r\n */\r\nexport class FilterService {\r\n\r\n  /**\r\n   * An object storing the current filter selections, mapped by filter key.\r\n   * @type {Object<string, Object>}\r\n   */\r\n  selectedFilters = {}; // Filteroptionen zwischen Themen und Region/Regionsart\r\n\r\n  /**\r\n   * Creates a new instance of FilterService.\r\n   * @param {Object} uiAccessService - Service responsible for UI interactions (setting UI elements).\r\n   * @param {Object} propertyService - Service handling property (dimension/measure) information.\r\n   * @param {Object} regionService - Service handling region data and selection.\r\n   * @param {Object} urlService - Service for managing URL parameters related to filters.\r\n   * @param {Object} chartService - Service for re-rendering the chart (note: assigned to `this.urlService`).\r\n   * @param {Object} visualizationService - Service for managing the visualization mode/grouping, etc.\r\n   */\r\n  constructor(\r\n      uiAccessService,\r\n      propertyService,\r\n      regionService,\r\n      urlService,\r\n      chartService,\r\n      visualizationService,\r\n  ) {\r\n    this.uiAccessService = uiAccessService;\r\n    this.propertyService = propertyService;\r\n    this.regionService = regionService;\r\n    this.filterUrlService = urlService;\r\n    this.urlService = chartService;\r\n    this.visualizationService = visualizationService;\r\n  }\r\n\r\n  /**\r\n   * Sets a filter to a specified value, updating the URL and triggering a chart re-render if necessary.\r\n   * Certain filters ('lang' or 'mode') are ignored in this method.\r\n   * @param {string} filter - The filter key (e.g., 'region', 'measure').\r\n   * @param {string|boolean} value - The value to set for this filter.\r\n   * @returns {boolean} Returns `true` if the filter was successfully set, otherwise `false`.\r\n   */\r\n  setSelectedFilter = (filter, value) => {\r\n    if (filter === 'lang' || filter === 'mode') {\r\n      return false;\r\n    }\r\n\r\n    const availableFilters = this.propertyService.getKeyDimensionsForCube().map((property) => cssifyString(property.dimPath.value));\r\n\r\n    if (!availableFilters.includes(filter)) {\r\n      this.filterUrlService.removeFilterInUrl(filter);\r\n      delete this.selectedFilters[filter];\r\n      return false;\r\n    }\r\n\r\n    const filterValue = this.propertyService.getKeyDimensionsForCube().find((prop) => cssifyString(prop.dimPath.value) === filter).options.find((option) => option.value.value == value);\r\n    if (!filterValue) {\r\n      this.filterUrlService.removeFilterInUrl(filter);\r\n      return false;\r\n    }\r\n\r\n    this.selectedFilters[filter] = filterValue;\r\n\r\n    this.filterUrlService.putFilterInUrl(filter, value);\r\n    this.urlService.rerender();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Resets all selected filters to their default values by removing them from the URL\r\n   * and re-initializing `selectedFilters` with the first option for each key dimension.\r\n   * Finally, updates the URL with default filters.\r\n   * @returns {void}\r\n   */\r\n  resetSelectedFilters = () => {\r\n    Object.keys(this.selectedFilters).forEach(\r\n        this.filterUrlService.removeFilterInUrl,\r\n    );\r\n    this.selectedFilters = {};\r\n    this.propertyService.getKeyDimensionsForCube().forEach((key) => {\r\n      this.selectedFilters[cssifyString(key.dimPath.value)] = key.options[0];\r\n    });\r\n    this.fillDefaultFiltersInUrl();\r\n  };\r\n\r\n  /**\r\n   * Ensures that all possible filters have some default value set in the URL.\r\n   * If a filter is not currently set, it assigns either a hardcoded default\r\n   * or the first option of the corresponding key dimension.\r\n   * @returns {void}\r\n   */\r\n  fillDefaultFiltersInUrl = () => {\r\n    const possibleFilters = this.getPossibleFiltersFromUrl();\r\n    const setFilters = this.filterUrlService.getSortedFiltersFromUrl();\r\n    const unsetFilters = possibleFilters.filter(\r\n        (f) => !setFilters.map((e) => e[0]).includes(f),\r\n    );\r\n    unsetFilters.forEach((filter) => {\r\n      if (DEBUG_LOGS) {\r\n        console.log('setting default for filter: ', filter);\r\n      }\r\n      switch (filter) {\r\n        case 'mode':\r\n          this.filterUrlService.putFilterInUrl(filter, 'chart');\r\n          break;\r\n        case 'grouped-classification':\r\n          this.filterUrlService.putFilterInUrl(filter, false);\r\n          break;\r\n        case 'grouped-region':\r\n          this.filterUrlService.putFilterInUrl(filter, false);\r\n          break;\r\n        case 'regionType':\r\n          this.filterUrlService.putFilterInUrl(\r\n              filter,\r\n              this.regionService.selectedRegionType,\r\n          );\r\n          break;\r\n        case 'region':\r\n          this.filterUrlService.putFilterInUrl(\r\n              filter,\r\n              this.regionService.selectedRegion.value.value,\r\n          );\r\n          break;\r\n        case 'measure':\r\n          this.filterUrlService.putFilterInUrl(\r\n              filter,\r\n              this.propertyService.yAxis,\r\n          );\r\n          break;\r\n        case 'classification':\r\n          this.filterUrlService.putFilterInUrl(\r\n              filter,\r\n              this.propertyService.cube,\r\n          );\r\n          break;\r\n        default:\r\n          const defaultValue = this.propertyService.getKeyDimensionsForCube().find((property) => cssifyString(property.dimPath.value) ===\r\n              filter)?.options[0].value.value;\r\n          this.filterUrlService.putFilterInUrl(filter, defaultValue);\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Retrieves all filters currently in the URL, sorted by a predefined order:\r\n   * ['mode', 'grouped-region', 'regionType', 'region', 'measure', 'classification'].\r\n   * Any filters not in the predefined list are placed at the end of the array.\r\n   * @returns {Array<[string, string]>} An array of key-value pairs representing the sorted filters.\r\n   */\r\n  getSortedFiltersFromUrl = () => {\r\n    const sortOrder = [\r\n      'mode',\r\n      'grouped-region',\r\n      'regionType',\r\n      'region',\r\n      'measure',\r\n      'classification',\r\n    ];\r\n    return Array.from(this.filterUrlService.urlParams).sort(\r\n        ([keyA], [keyB]) => {\r\n          const priorityA = sortOrder.indexOf(keyA);\r\n          const priorityB = sortOrder.indexOf(keyB);\r\n\r\n          // Items not in sortOrder should be placed at the end\r\n          const adjustedPriorityA = priorityA > -1 ? priorityA: sortOrder.length;\r\n          const adjustedPriorityB = priorityB > -1 ? priorityB: sortOrder.length;\r\n\r\n          return adjustedPriorityA - adjustedPriorityB;\r\n        },\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Returns a list of all possible filters that can appear in the URL.\r\n   * This list is composed of a fixed set of filters plus any dynamic ones\r\n   * derived from the key dimensions of the current cube.\r\n   * @returns {string[]} An array of filter keys.\r\n   */\r\n  getPossibleFiltersFromUrl = () => {\r\n    const fixedFilters = [\r\n      'mode',\r\n      'grouped-classification',\r\n      'grouped-region',\r\n      'regionType',\r\n      'region',\r\n      'measure',\r\n      'classification',\r\n    ];\r\n\r\n    const dynamicFilters = this.propertyService.getKeyDimensionsForCube().map((property) => cssifyString(property.dimPath.value));\r\n\r\n    return [...fixedFilters, ...dynamicFilters];\r\n  };\r\n\r\n  /**\r\n   * Parses a string as a boolean value ('true' or 'false').\r\n   * @param {string} value - The string value to parse.\r\n   * @returns {boolean|undefined} `true` if the string is 'true',\r\n   * `false` if the string is 'false', otherwise `undefined`.\r\n   */\r\n  parseBoolean = (value) => {\r\n    if (value === 'true') {\r\n      return true;\r\n    }\r\n    if (value === 'false') {\r\n      return false;\r\n    }\r\n    return undefined;\r\n  };\r\n\r\n  /**\r\n   * Applies filters from the current URL. If a filter is not set, defaults are filled.\r\n   * Then each filter is processed in sorted order, calling appropriate service methods\r\n   * to apply the filter logic (mode, grouped-region, region, measure, classification, etc.).\r\n   * @returns {void}\r\n   */\r\n  applyFiltersFromUrl = () => {\r\n    this.fillDefaultFiltersInUrl();\r\n    this.getSortedFiltersFromUrl().map(([key, value]) => {\r\n      if (DEBUG_LOGS) {\r\n        console.log('apply filter: ', key, value);\r\n      }\r\n      switch (key) {\r\n        case 'mode':\r\n          this.visualizationService.setMode(value);\r\n          break;\r\n        case 'grouped-classification':\r\n          this.visualizationService.setGroupedClassification(this.parseBoolean(value));\r\n          break;\r\n        case 'grouped-region':\r\n          this.visualizationService.setGroupedRegion(this.parseBoolean(value));\r\n          break;\r\n        case 'regionType':\r\n          if (this.regionService.setRegionType(value)) {\r\n            this.uiAccessService.setRegionType(value);\r\n          }\r\n          break;\r\n        case 'region':\r\n          if (this.regionService.setRegion(value)) {\r\n            this.uiAccessService.setRegion(value);\r\n          }\r\n          break;\r\n        case 'measure':\r\n          if (this.propertyService.setMeasure(value)) {\r\n            this.uiAccessService.setMeasure(value);\r\n          }\r\n          this.resetSelectedFilters();\r\n          break;\r\n        case 'classification':\r\n          if (this.propertyService.setClassification(value)) {\r\n            this.uiAccessService.setClassification(value);\r\n          }\r\n          this.resetSelectedFilters();\r\n          break;\r\n        default:\r\n          if (this.setSelectedFilter(key, value)) {\r\n            this.uiAccessService.setOtherFilter(key, value);\r\n          }\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.urlService.rerender();\r\n  };\r\n}\r\n", "import {LINDAS_ENDPOINT} from '../config.js';\r\nimport {getColor} from './shared.js';\r\n\r\n/***\r\n * An object containing various functions to build chart configurations (for both\r\n * chart and map visualizations) as well as utilities for grouping and region filtering.\r\n */\r\nexport const chartState = {\r\n  /**\r\n   * Generates a configuration object for a column chart visualization based on the\r\n   * current viewer state and the specified filters.\r\n   *\r\n   * @function chart\r\n   * @param {Object} lfiViewer - An object containing services like propertyService,\r\n   *   visualizationService, regionService, etc.\r\n   * @param {Object} filters - A mapping of filter keys to objects, each containing\r\n   *   a `dimPath` and `value`.\r\n   * @returns {Object} The configuration object for creating a column chart.\r\n   */\r\n  chart: function(lfiViewer, filters) {\r\n    const filterObj = {};\r\n    Object.keys(filters).map((filterName) => {\r\n      if (filterName === 'https://environment.ld.admin.ch/foen/nfi/classificationUnit') {\r\n        if (lfiViewer.visualizationService.groupedClassification) {\r\n          const values = {};\r\n          lfiViewer.propertyService.classificationDimensions.forEach((element, index) => {\r\n            if (element !== \"https://environment.ld.admin.ch/foen/nfi/ClassificationUnit/Total\") {\r\n              values[element] = true;\r\n            }\r\n          });\r\n          filterObj[filters[filterName].dimPath.value] = {\r\n            type: 'multi',\r\n            values: values,\r\n          };\r\n        } else {\r\n          filterObj[filters[filterName].dimPath.value] = {\r\n            type: 'single',\r\n            value: filters[filterName].value.value,\r\n          };\r\n        }\r\n      } else {\r\n        filterObj[filters[filterName].dimPath.value] = {\r\n          type: 'single',\r\n          value: filters[filterName].value.value,\r\n        };\r\n      }\r\n    });\r\n\r\n    filterObj['https://environment.ld.admin.ch/foen/nfi/unitOfReference'] =\r\n        chartState.regionFilter(\r\n            lfiViewer,\r\n            lfiViewer.visualizationService.groupedRegion,\r\n        );\r\n\r\n    return {\r\n      version: '4.0.0',\r\n      state: 'CONFIGURING_CHART',\r\n      dataSource: {\r\n        type: 'sparql',\r\n        url: `${LINDAS_ENDPOINT}`,\r\n      },\r\n      layout: {\r\n        type: 'tab',\r\n        meta: {\r\n          title: {\r\n            de: '',\r\n            en: '',\r\n            fr: '',\r\n            it: '',\r\n          },\r\n          description: {\r\n            de: '',\r\n            en: '',\r\n            fr: '',\r\n            it: '',\r\n          },\r\n          label: {\r\n            de: \"\",\r\n            en: \"\",\r\n            fr: \"\",\r\n            it: \"\"\r\n          }\r\n        },\r\n      },\r\n      chartConfigs: [\r\n        {\r\n          key: 'zTuhSfYsiB7W',\r\n          version: '3.2.0',\r\n          meta: {\r\n            title: {\r\n              en: '',\r\n              de: '',\r\n              fr: '',\r\n              it: '',\r\n            },\r\n            description: {\r\n              en: '',\r\n              de: '',\r\n              fr: '',\r\n              it: '',\r\n            },\r\n            label: {\r\n              en: \"\",\r\n              de: \"\",\r\n              fr: \"\",\r\n              it: \"\"\r\n            }\r\n          },\r\n          cubes: [\r\n            {\r\n              iri: lfiViewer.propertyService.cube,\r\n              publishIri: lfiViewer.propertyService.cube,\r\n              filters: filterObj,\r\n            },\r\n          ],\r\n          chartType: 'column',\r\n          interactiveFiltersConfig: {\r\n            legend: {\r\n              active: false,\r\n              componentIri: '',\r\n            },\r\n            timeRange: {\r\n              active: false,\r\n              componentIri:\r\n                  'https://environment.ld.admin.ch/foen/nfi/inventory',\r\n              presets: {\r\n                type: 'range',\r\n                from: '',\r\n                to: '',\r\n              },\r\n            },\r\n            dataFilters: {\r\n              active: false,\r\n              componentIris: [],\r\n            },\r\n            calculation: {\r\n              active: false,\r\n              type: 'identity',\r\n            },\r\n          },\r\n          fields: {\r\n            x: {\r\n              componentIri:\r\n                  'https://environment.ld.admin.ch/foen/nfi/inventory',\r\n              sorting: {\r\n                sortingType: 'byAuto',\r\n                sortingOrder: 'asc',\r\n              },\r\n            },\r\n            y: {\r\n              componentIri: lfiViewer.propertyService.yAxis,\r\n            },\r\n            ...(lfiViewer.visualizationService.groupedRegion && chartState.groupedRegion()),\r\n            ...(lfiViewer.visualizationService.groupedClassification && chartState.groupedClassification(lfiViewer))\r\n          },\r\n        },\r\n      ],\r\n      activeChartKey: 'zTuhSfYsiB7W',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Generates a configuration object for a map visualization based on the\r\n   * current viewer state and the specified filters.\r\n   *\r\n   * @function map\r\n   * @param {Object} lfiViewer - An object containing services like propertyService,\r\n   *   visualizationService, regionService, etc.\r\n   * @param {Object} filters - A mapping of filter keys to objects, each containing\r\n   *   a `dimPath` and `value`.\r\n   * @returns {Object} The configuration object for creating a map visualization.\r\n   */\r\n  map: function(lfiViewer, filters) {\r\n    const regionValues = {};\r\n\r\n    lfiViewer.regionService.regions[lfiViewer.regionService.selectedRegionType].forEach(\r\n        (region) => (regionValues[region.value.value] = true),\r\n    );\r\n\r\n    const filterObj = {};\r\n    filterObj['https://environment.ld.admin.ch/foen/nfi/unitOfReference'] =\r\n        chartState.regionFilter(lfiViewer, true);\r\n\r\n    Object.keys(filters).map((filterName) => {\r\n      filterObj[filters[filterName].dimPath.value] = {\r\n        type: 'single',\r\n        value: filters[filterName].value.value,\r\n      };\r\n    });\r\n\r\n    return {\r\n      version: '3.4.0',\r\n      state: 'CONFIGURING_CHART',\r\n      dataSource: {\r\n        type: 'sparql',\r\n        url: `${LINDAS_ENDPOINT}`,\r\n      },\r\n      layout: {\r\n        type: 'tab',\r\n        meta: {\r\n          title: {\r\n            de: '',\r\n            en: '',\r\n            fr: '',\r\n            it: '',\r\n          },\r\n          description: {\r\n            de: '',\r\n            en: '',\r\n            fr: '',\r\n            it: '',\r\n          },\r\n        },\r\n      },\r\n      chartConfigs: [\r\n        {\r\n          key: 'jEASF-9qEqaC',\r\n          version: '3.3.0',\r\n          meta: {\r\n            title: {\r\n              en: '',\r\n              de: '',\r\n              fr: '',\r\n              it: '',\r\n            },\r\n            description: {\r\n              en: '',\r\n              de: '',\r\n              fr: '',\r\n              it: '',\r\n            },\r\n          },\r\n          cubes: [\r\n            {\r\n              iri: lfiViewer.propertyService.cube,\r\n              publishIri: lfiViewer.propertyService.cube,\r\n              filters: filterObj,\r\n            },\r\n          ],\r\n          activeField: 'animation',\r\n          chartType: 'map',\r\n          interactiveFiltersConfig: {\r\n            legend: {\r\n              active: false,\r\n              componentIri: '',\r\n            },\r\n            timeRange: {\r\n              active: false,\r\n              componentIri:\r\n                  'https://environment.ld.admin.ch/foen/nfi/inventory',\r\n              presets: {\r\n                type: 'range',\r\n                from: '',\r\n                to: '',\r\n              },\r\n            },\r\n            dataFilters: {\r\n              active: false,\r\n              componentIris: [],\r\n            },\r\n            calculation: {\r\n              active: false,\r\n              type: 'identity',\r\n            },\r\n          },\r\n          baseLayer: {\r\n            show: true,\r\n            locked: false,\r\n          },\r\n          fields: {\r\n            areaLayer: {\r\n              componentIri:\r\n                  'https://environment.ld.admin.ch/foen/nfi/unitOfReference',\r\n              color: {\r\n                type: 'numerical',\r\n                componentIri: lfiViewer.propertyService.yAxis,\r\n                palette: 'oranges',\r\n                scaleType: 'continuous',\r\n                interpolationType: 'linear',\r\n                opacity: 100,\r\n              },\r\n            },\r\n            animation: {\r\n              componentIri:\r\n                  'https://environment.ld.admin.ch/foen/nfi/inventory',\r\n              showPlayButton: true,\r\n              duration: 10,\r\n              type: 'stepped',\r\n              dynamicScales: false,\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      activeChartKey: 'jEASF-9qEqaC',\r\n      dashboardFilters: {\r\n        filters: [],\r\n      },\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Returns a configuration object to enable 'grouped' visualization.\r\n   * Primarily configures a 'segment' field for categorizing data by\r\n   * 'unitOfReference' with associated color mappings.\r\n   *\r\n   * @function groupedRegion\r\n   * @returns {Object} A partial fields configuration object used by chart visualizations.\r\n   */\r\n  groupedRegion: function() {\r\n    return {\r\n      segment: {\r\n        componentIri:\r\n            'https://environment.ld.admin.ch/foen/nfi/unitOfReference',\r\n        palette: 'category10',\r\n        sorting: {\r\n          sortingType: 'byAuto',\r\n          sortingOrder: 'asc',\r\n        },\r\n        colorMapping: {\r\n          'https://ld.admin.ch/canton/1': '#1f77b4',\r\n          'https://ld.admin.ch/canton/10': '#ff7f0e',\r\n          'https://ld.admin.ch/canton/11': '#2ca02c',\r\n          'https://ld.admin.ch/canton/14': '#d62728',\r\n          'https://ld.admin.ch/canton/15': '#9467bd',\r\n          'https://ld.admin.ch/canton/16': '#8c564b',\r\n          'https://ld.admin.ch/canton/17': '#e377c2',\r\n          'https://ld.admin.ch/canton/18': '#7f7f7f',\r\n          'https://ld.admin.ch/canton/19': '#bcbd22',\r\n          'https://ld.admin.ch/canton/2': '#17becf',\r\n          'https://ld.admin.ch/canton/20': '#1f77b4',\r\n          'https://ld.admin.ch/canton/21': '#ff7f0e',\r\n          'https://ld.admin.ch/canton/22': '#2ca02c',\r\n          'https://ld.admin.ch/canton/23': '#d62728',\r\n          'https://ld.admin.ch/canton/24': '#9467bd',\r\n          'https://ld.admin.ch/canton/25': '#8c564b',\r\n          'https://ld.admin.ch/canton/26': '#e377c2',\r\n          'https://ld.admin.ch/canton/3': '#7f7f7f',\r\n          'https://ld.admin.ch/canton/4': '#bcbd22',\r\n          'https://ld.admin.ch/canton/5': '#17becf',\r\n          'https://ld.admin.ch/canton/6': '#1f77b4',\r\n          'https://ld.admin.ch/canton/7': '#ff7f0e',\r\n          'https://ld.admin.ch/canton/8': '#2ca02c',\r\n          'https://ld.admin.ch/canton/9': '#d62728',\r\n          'https://ld.admin.ch/country/CHE': '#9467bd',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/cantonregions/13': '#8c564b',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/1': '#e377c2',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/10': '#7f7f7f',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/11': '#bcbd22',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/12': '#17becf',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/13': '#1f77b4',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/14': '#ff7f0e',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/2': '#2ca02c',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/3': '#d62728',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/4': '#9467bd',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/5': '#8c564b',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/6': '#e377c2',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/7': '#7f7f7f',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/8': '#bcbd22',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/economicregions/9': '#17becf',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/productionregions/1': '#1f77b4',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/productionregions/2': '#ff7f0e',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/productionregions/3': '#2ca02c',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/productionregions/4': '#d62728',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/productionregions/5': '#9467bd',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/protectionforestregions/1': '#8c564b',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/protectionforestregions/2': '#e377c2',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/protectionforestregions/3': '#7f7f7f',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/protectionforestregions/4': '#bcbd22',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/protectionforestregions/5': '#17becf',\r\n          'https://ld.admin.ch/dimension/bgdi/biota/protectionforestregions/6': '#1f77b4',\r\n        },\r\n        type: 'grouped',\r\n        useAbbreviations: true,\r\n      },\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Generates a grouped classification configuration for visualization purposes.\r\n   *\r\n   * This function creates a classification configuration using properties from the provided\r\n   * `lfiViewer` object. It maps classification dimensions to specific colors, constructs\r\n   * a unique component ID from the cube IRI, and returns an object defining the configuration for a stacked\r\n   * segment visualization.\r\n   *\r\n   * @function\r\n   * @param {Object} lfiViewer - Viewer object containing property service details.\r\n   * @param {Object} lfiViewer.propertyService - Object containing properties used to configure the classification.\r\n   * @param {Array<string>} lfiViewer.propertyService.classificationDimensions - Array of classification dimension names.\r\n   * @param {string} lfiViewer.propertyService.cube - Full versioned cube identifier string.\r\n   * @returns {Object} Configuration object for a stacked segment visualization.\r\n   */\r\n  groupedClassification: function(lfiViewer) {\r\n    const colorMapping = {};\r\n\r\n    lfiViewer.propertyService.classificationDimensions.forEach((element, index) => {\r\n      colorMapping[element] = getColor(index);\r\n    });\r\n\r\n    const cubeWithVersion = lfiViewer.propertyService.cube;\r\n    const cubeParts = cubeWithVersion.split('/');\r\n    cubeParts.pop();\r\n\r\n    const componentId = cubeParts.join('/') + \"(VISUALIZE.ADMIN_COMPONENT_ID_SEPARATOR)https://environment.ld.admin.ch/foen/nfi/classificationUnit\";\r\n\r\n    return {\r\n      segment: {\r\n        componentId: componentId,\r\n        palette: \"category10\",\r\n        sorting: {\r\n          sortingType: \"byAuto\",\r\n          sortingOrder: \"asc\"\r\n        },\r\n        colorMapping: colorMapping,\r\n        type: \"stacked\"\r\n      }\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Returns a filter object for the 'unitOfReference' dimension, either in single\r\n   * or multi form, depending on whether multiple regions should be selected.\r\n   *\r\n   * @function regionFilter\r\n   * @param {Object} lfiViewer - An object containing services like regionService,\r\n   *   visualizationService, etc.\r\n   * @param {boolean} multi - If true, selects all regions under `selectedRegionType`.\r\n   *   Otherwise, uses the single selected region.\r\n   * @returns {Object} A filter object compatible with the visualization config.\r\n   */\r\n  regionFilter: function(lfiViewer, multi) {\r\n    if (multi) {\r\n      const regionValues = {};\r\n\r\n      lfiViewer.regionService.regions[\r\n          lfiViewer.regionService.selectedRegionType\r\n          ].forEach((region) => (regionValues[region.value.value] = true));\r\n\r\n      return {\r\n        type: 'multi',\r\n        values: regionValues,\r\n      };\r\n    } else {\r\n      return {\r\n        type: 'single',\r\n        value: lfiViewer.regionService.selectedRegion.value.value,\r\n      };\r\n    }\r\n  },\r\n};\r\n", "import {VISUALIZE_CUBE_LINK_START} from '../config.js';\r\n\r\nexport class LinkService {\r\n\r\n  #linkElementId = 'visualize-link';\r\n\r\n  #linkElement;\r\n\r\n  constructor() {\r\n    this.#linkElement = document.getElementById(this.#linkElementId);\r\n  }\r\n\r\n  setCube(cube) {\r\n    this.#linkElement.href = VISUALIZE_CUBE_LINK_START + cube;\r\n  }\r\n}\r\n", "import {UiAccessService} from './services/UiAccessService.js';\r\nimport {ChartService} from './services/ChartService.js';\r\nimport {StepperService} from './services/StepperService.js';\r\nimport {UrlService} from './services/UrlService.js';\r\nimport {I18nService} from './services/I18nService.js';\r\nimport {PropertyService} from './services/PropertyService.js';\r\nimport {RegionService} from './services/RegionService.js';\r\nimport {VisualizationService} from './services/VisualizationService.js';\r\nimport {FilterService} from './services/FilterService.js';\r\nimport {chartState} from './util/ChartStateUtil.js';\r\nimport {LinkService} from './services/LinkService.js';\r\n\r\n/**\r\n * A top-level class that orchestrates different services in the application,\r\n * handling the lifecycle of fetching data, initializing UI elements, and managing\r\n * user interactions via setters for measure, classification, region, etc.\r\n */\r\nexport class LfiViewer {\r\n  /**\r\n   * Creates a new instance of LfiViewer and initializes the service objects.\r\n   * @param {string} lang - The current language code (e.g., 'en', 'de', 'fr').\r\n   * @param {string} baseUrl - The base URL for constructing endpoints or references.\r\n   * @param {HTMLElement} container - The container element where charts or UI components are rendered.\r\n   */\r\n  constructor(lang, baseUrl, container) {\r\n\r\n    /**\r\n     * The current language code in use (e.g., 'en', 'de', 'fr').\r\n     * @type {string}\r\n     */\r\n    this.lang = lang;\r\n\r\n    /**\r\n     * A service that provides methods for UI interactions (dropdowns, checkboxes, etc.).\r\n     * @type {UiAccessService}\r\n     */\r\n    this.uiAccessService = new UiAccessService();\r\n\r\n    /**\r\n     * A service for creating and rendering charts.\r\n     * @type {ChartService}\r\n     */\r\n    this.chartService = new ChartService(this.lang, baseUrl, container);\r\n\r\n    /**\r\n     * A service for managing step transitions in a stepper UI component.\r\n     * @type {StepperService}\r\n     */\r\n    this.stepperService = new StepperService();\r\n\r\n    /**\r\n     * A service for reading and updating URL parameters.\r\n     * @type {UrlService}\r\n     */\r\n    this.urlService = new UrlService();\r\n\r\n    /**\r\n     * A service for providing internationalization (i18n) capabilities.\r\n     * @type {I18nService}\r\n     */\r\n    this.i18nService = new I18nService();\r\n\r\n    /**\r\n     * A service for managing properties (dimensions/measures) and their options.\r\n     * @type {PropertyService}\r\n     */\r\n    this.propertyService = new PropertyService(\r\n        this,\r\n        this.lang,\r\n        this.uiAccessService,\r\n        this.urlService,\r\n        this.chartService,\r\n        this.i18nService,\r\n    );\r\n\r\n    /**\r\n     * A service for handling region data, including fetching and selecting regions.\r\n     * @type {RegionService}\r\n     */\r\n    this.regionService = new RegionService(\r\n        this,\r\n        this.lang,\r\n        this.uiAccessService,\r\n        this.urlService,\r\n        this.chartService,\r\n        this.i18nService,\r\n    );\r\n\r\n    /**\r\n     * A service for managing the visualization mode (chart/map) and whether data is grouped.\r\n     * @type {VisualizationService}\r\n     */\r\n    this.visualizationService = new VisualizationService(\r\n        this.uiAccessService,\r\n        this.urlService,\r\n        this.chartService,\r\n    );\r\n\r\n    /**\r\n     * A service for managing filters, updating URL parameters, and re-rendering the chart.\r\n     * @type {FilterService}\r\n     */\r\n    this.filterService = new FilterService(\r\n        this.uiAccessService,\r\n        this.propertyService,\r\n        this.regionService,\r\n        this.urlService,\r\n        this.chartService,\r\n        this.visualizationService,\r\n    );\r\n\r\n    this.linkService = new LinkService();\r\n  }\r\n\r\n  /**\r\n   * Initializes the LfiViewer by setting default language filters in the URL,\r\n   * fetching necessary data, populating UI elements, applying filters, and finally\r\n   * rendering the chart.\r\n   * @async\r\n   * @returns {Promise<void>} A promise that resolves once initialization is complete.\r\n   */\r\n  initialize = async () => {\r\n    // Store the language in the URL as a filter\r\n    this.urlService.putFilterInUrl('lang', this.lang);\r\n\r\n    // Fetch initial properties (dimensions) and region data concurrently\r\n    await Promise.all([\r\n      this.propertyService.fetchProperties(),\r\n      this.regionService.fetchRegions(),\r\n    ]);\r\n\r\n    // Fetch the additional property options\r\n    await this.propertyService.fetchPropertiesOptions();\r\n\r\n    // Populate UI select elements\r\n    this.propertyService.populateMeasureSelect();\r\n    this.propertyService.populateClassificationSelect();\r\n    this.regionService.populateRegionSelect();\r\n\r\n    // Reset filters to defaults, then apply any existing URL filters\r\n    this.filterService.resetSelectedFilters();\r\n    this.filterService.applyFiltersFromUrl();\r\n\r\n    // Create the chart iframe with a config derived from the chartState\r\n    this.chartService.createIframe(() =>\r\n        chartState[this.visualizationService.mode](\r\n            this,\r\n            this.filterService.selectedFilters\r\n        )\r\n    );\r\n    this.chartService.rerender();\r\n\r\n    // Initialize dropdowns and checkboxes (Semantic UI)\r\n    this.uiAccessService.initDropdowns();\r\n    this.uiAccessService.initCheckboxes();\r\n  };\r\n\r\n  /**\r\n   * Sets the current step in the stepper UI.\r\n   * @param {number} value - The step number to switch to.\r\n   * @returns {void}\r\n   */\r\n  setStep = (value) => {\r\n    this.stepperService.changeStep(Number(value));\r\n  };\r\n\r\n  /**\r\n   * Moves to the next step in the stepper UI, if available.\r\n   * @returns {void}\r\n   */\r\n  setNextStep = () => {\r\n    this.stepperService.onNextStep();\r\n  };\r\n\r\n  /**\r\n   * Moves to the previous step in the stepper UI, if possible.\r\n   * @returns {void}\r\n   */\r\n  setLastStep = () => {\r\n    this.stepperService.onLastStep();\r\n  };\r\n\r\n  /**\r\n   * Sets the current measure dimension using the PropertyService.\r\n   * @param {string} value - The measure dimension to select.\r\n   * @returns {void}\r\n   */\r\n  setMeasure = (value) => {\r\n    this.propertyService.setMeasure(value);\r\n  };\r\n\r\n  /**\r\n   * Sets the classification dimension using the PropertyService.\r\n   * @param {string} value - The classification dimension to select.\r\n   * @returns {void}\r\n   */\r\n  setClassification = (value) => {\r\n    this.propertyService.setClassification(value);\r\n    this.linkService.setCube(value);\r\n  };\r\n\r\n  /**\r\n   * Sets the currently selected region using the RegionService.\r\n   * @param {string} value - The region to select.\r\n   * @returns {void}\r\n   */\r\n  setRegion = (value) => {\r\n    this.regionService.setRegion(value);\r\n  };\r\n\r\n  /**\r\n   * Sets the currently selected region type using the RegionService.\r\n   * @param {string} value - The region type to select.\r\n   * @returns {void}\r\n   */\r\n  setRegionType = (value) => {\r\n    this.regionService.setRegionType(value);\r\n  };\r\n\r\n  /**\r\n   * Sets the visualization mode (e.g., 'chart' or 'map') using the VisualizationService.\r\n   * @param {string} value - The desired visualization mode.\r\n   * @returns {void}\r\n   */\r\n  setMode = (value) => {\r\n    this.visualizationService.setMode(value);\r\n  };\r\n\r\n  /**\r\n   * Sets the grouped classification in the visualization service.\r\n   *\r\n   * @param {boolean} value - The value to set as the grouped classification.\r\n   * @returns {void}\r\n   */\r\n  setGroupedClassification = (value) => {\r\n    this.visualizationService.setGroupedClassification(value);\r\n  };\r\n\r\n  /**\r\n   * Toggles whether data should be grouped (segmentation) by region type using the VisualizationService.\r\n   * @param {boolean} value - If true, groups data by region; otherwise, does not group.\r\n   * @returns {void}\r\n   */\r\n  setGroupedRegion = (value) => {\r\n    this.visualizationService.setGroupedRegion(value);\r\n  };\r\n\r\n  /**\r\n   * Sets a filter (key-value pair) using the FilterService.\r\n   * @param {string} key - The filter key (usually a dimension path).\r\n   * @param {string|number|boolean} value - The filter value.\r\n   * @returns {void}\r\n   */\r\n  setSelectedFilter = (key, value) => {\r\n    this.filterService.setSelectedFilter(key, value);\r\n  };\r\n\r\n  /**\r\n   * Logs the current chart configuration to the console for debugging purposes.\r\n   * Call from debug console with `lfiViewer.printChartState()`.\r\n   * @returns {void}\r\n   */\r\n  printChartState = () => {\r\n    console.log(\r\n        chartState[this.visualizationService.mode](\r\n            this,\r\n            this.filterService.selectedFilters,\r\n        ),\r\n    );\r\n  };\r\n}\r\n", "import {showLoader, hideLoader, showError} from './src/util/LoaderUtil.js';\r\nimport {getUrlParams} from './src/util/shared.js';\r\nimport {VISUALIZE_URL} from './src/config.js';\r\nimport {LfiViewer} from './src/LfiViewer.js';\r\nimport {I18nService} from './src/services/I18nService.js';\r\n\r\n/**\r\n * Global variables and function definitions used to initialize and manage the main\r\n * LFI Viewer application, including event registration, language handling, and\r\n * step navigation.\r\n */\r\n\r\n/**\r\n * A global reference to the main LfiViewer instance. Set once initialization completes.\r\n * @type {LfiViewer|undefined}\r\n */\r\nlet lfiViewer;\r\n\r\nlet environment;\r\n\r\n/**\r\n * A global instance of the internationalization service.\r\n * @type {I18nService}\r\n */\r\nconst i18nService = new I18nService();\r\n\r\n// Register DOM event handlers\r\nregisterEvents();\r\n\r\n/**\r\n * Initializes the LfiViewer with a given language. Fetches data, sets up UI and\r\n * event listeners, and handles error scenarios.\r\n * @param {string|null} lang - The language\r\n * @param {string|null} env - The environment (nfi, blw, ...)\r\n * @async\r\n * @function initialize\r\n * @returns {Promise<void>}\r\n */\r\nexport async function initialize(lang, env = null) {\r\n  try {\r\n    if (lang === null) {\r\n      const urlParams = getUrlParams();\r\n      lang = i18nService.getLanguageFromUrl(urlParams, env);\r\n    }\r\n    if (env) {\r\n      environment = env;\r\n    }\r\n\r\n    showLoader();\r\n\r\n    const element = document.getElementById('main-content');\r\n\r\n    if (element) {\r\n\r\n      // Instantiate the main viewer object\r\n      lfiViewer = new LfiViewer(\r\n        lang,\r\n        VISUALIZE_URL,\r\n        element,\r\n        environment\r\n      );\r\n\r\n      // Set and display the language\r\n      i18nService.setLanguage(lang);\r\n      i18nService.updateLanguageDisplay(environment, lang);\r\n\r\n      // Perform the LfiViewer initialization sequence\r\n      await lfiViewer.initialize();\r\n\r\n      hideLoader();\r\n    }\r\n    else {\r\n      console.error('Initialization failed: Target element not found');\r\n    }\r\n\r\n  }\r\n  catch (error) {\r\n    console.error('Initialization failed: ', error);\r\n    showError(i18nService, lang);\r\n  }\r\n}\r\n\r\n/**\r\n * Event handler for DOMContentLoaded. Reads the language from the URL and initializes the app.\r\n */\r\n// document.addEventListener('DOMContentLoaded', async () => {\r\n//   const urlParams = getUrlParams();\r\n//   const language = i18nService.getLanguageFromUrl(urlParams);\r\n//   await initialize(language);\r\n// });\r\n\r\n/**\r\n * Registers all necessary DOM event handlers for the application, including steps,\r\n * navigation, grouping, mode switching, and language changes.\r\n * @function registerEvents\r\n * @returns {void}\r\n */\r\nfunction registerEvents() {\r\n  const stepElements = document.querySelectorAll('.step');\r\n  for (const stepElement of stepElements) {\r\n    stepElement.addEventListener('click', onChangeStep);\r\n  }\r\n\r\n  const nextStepElement = document.getElementById('next-button');\r\n  nextStepElement.addEventListener('click', onNextStep);\r\n\r\n  const lastStepElement = document.getElementById('last-button');\r\n  lastStepElement.addEventListener('click', onPreviousStep);\r\n\r\n  const groupedClassificationElement = document.getElementById(\r\n      'grouped-classification');\r\n  groupedClassificationElement.addEventListener('change',\r\n      onGroupedClassificationChanged);\r\n\r\n  const groupedRegionElement = document.getElementById('grouped-region');\r\n  groupedRegionElement.addEventListener('change', onGroupedRegionChanged);\r\n\r\n  const chartButtonElements = document.querySelectorAll(\r\n      '.visualization-buttons .button');\r\n  for (const chartButtonElement of chartButtonElements) {\r\n    chartButtonElement.addEventListener('click', onSwitchMode);\r\n  }\r\n\r\n  const changeLangElements = document.querySelectorAll(\r\n      '.header .menu .lang.item');\r\n  for (const changeLangElement of changeLangElements) {\r\n    changeLangElement.addEventListener('click', onChangeLang);\r\n  }\r\n\r\n  const resetButton = document.getElementById('reset-button');\r\n  resetButton.addEventListener('click', onResetClick)\r\n}\r\n\r\n/**\r\n * Event handler for step selection (click on step navigation elements).\r\n * @param {PointerEvent} event - The click event.\r\n * @returns {void}\r\n */\r\nfunction onChangeStep(event) {\r\n  lfiViewer.setStep(Number(event.target.dataset.step));\r\n}\r\n\r\n/**\r\n * Event handler for the \"next step\" button click.\r\n * @returns {void}\r\n */\r\nfunction onNextStep() {\r\n  lfiViewer.setNextStep();\r\n}\r\n\r\n/**\r\n * Event handler for the \"previous step\" button click.\r\n * @returns {void}\r\n */\r\nfunction onPreviousStep() {\r\n  lfiViewer.setLastStep();\r\n}\r\n\r\n/**\r\n * Handles the event triggered when the grouped classification option changes.\r\n *\r\n * @param {Event} event - The event object triggered by the change in grouped classification state.\r\n * @return {void} This method does not return a value.\r\n */\r\nfunction onGroupedClassificationChanged(event) {\r\n  setClassificationFilterHidden(event.target.checked);\r\n  if (event.target.checked) { // if new view = classification segmentation\r\n    lfiViewer.setGroupedRegion(false); // remove region segmentation\r\n    lfiViewer.setMode('chart'); // Show chart when classification segmentation\r\n  }\r\n  lfiViewer.setGroupedClassification(event.target.checked);\r\n}\r\n\r\n/**\r\n * Event handler for the grouped (segmentation) toggler change.\r\n * @param {Event} event - The change event from the grouped checkbox.\r\n * @returns {void}\r\n */\r\nfunction onGroupedRegionChanged(event) {\r\n  lfiViewer.setGroupedClassification(false);\r\n  lfiViewer.setGroupedRegion(event.target.checked);\r\n}\r\n\r\n/**\r\n * Event handler for chart/map mode switch buttons.\r\n * @param {PointerEvent} event - The click event.\r\n * @returns {void}\r\n */\r\nfunction onSwitchMode(event) {\r\n  if (event.target.dataset.mode === 'map') {\r\n    lfiViewer.setGroupedClassification(false);\r\n  }\r\n  lfiViewer.setMode(event.target.dataset.mode);\r\n}\r\n\r\n/**\r\n * Event handler for changing the language in the navigation menu.\r\n * @async\r\n * @param {PointerEvent} event - The click event.\r\n * @returns {Promise<void>}\r\n */\r\nasync function onChangeLang(event) {\r\n  if (event) {\r\n    const lang = event.target.dataset.lang;\r\n    if (i18nService.isValidLanguage(lang)) {\r\n      await initialize(lang, environment);\r\n    }\r\n  }\r\n}\r\n\r\nfunction onResetClick() {\r\n  window.location = window.location.pathname;\r\n}\r\n\r\nfunction setClassificationFilterHidden(hidden) {\r\n  const classificationFilter = document.getElementById('classification-filter');\r\n  classificationFilter.classList.toggle('hidden', hidden);\r\n}\r\n"],
  "mappings": "AASO,IAAMA,EAAa,IAAM,CAC9B,IAAMC,EAAS,SAAS,eAAe,QAAQ,EACzCC,EAAU,SAAS,eAAe,SAAS,EACjDD,EAAO,UAAU,OAAO,QAAQ,EAChCC,EAAQ,UAAU,IAAI,QAAQ,CAChC,EAOaC,EAAa,IAAM,CAC9B,IAAMF,EAAS,SAAS,eAAe,QAAQ,EACzCC,EAAU,SAAS,eAAe,SAAS,EACjDD,EAAO,UAAU,IAAI,QAAQ,EAC7BC,EAAQ,UAAU,OAAO,QAAQ,CACnC,EASaE,EAAY,CAACC,EAAaC,IAAS,CAC9C,IAAML,EAAS,SAAS,eAAe,QAAQ,EAC/CA,EAAO,UAAYI,EAAY,OAAO,MAAMC,CAAI,CAClD,EClCO,IAAMC,EAAgB,iCAMhBC,EAAkB,+CAMlBC,EAAyB,GAAGD,CAAe,iEAM3CE,EAAa,GAMbC,EAA4B,8CAO5BC,EAAgB,oDAQhBC,EAA8B,CACzC,gEACA,gEACA,gEACA,iEACF,EAQaC,EAAmB,CAC9B,oDACA,qDACA,oDACA,qDACA,qDACA,sDACA,oDACA,qDACA,oDACA,qDACA,oDACA,qDACA,oDACA,qDACA,oDACA,qDACA,oDACA,qDACA,qDACA,qDACA,sDACA,qDACA,sDACA,qDACA,sDACA,qDACA,sDACA,qDACA,qDACF,EAMaC,EAA4B,CAKvC,iEACF,EC5FO,SAASC,GAAe,CAC7B,OAAO,IAAI,gBAAgB,OAAO,SAAS,MAAM,UAAU,CAAC,CAAC,CAC/D,CAQO,SAASC,EAAgBC,EAAWC,EAAO,CAChDD,EAAU,WAAWC,EAAM,OAAO,KAAK,CACzC,CAQO,SAASC,EAAeF,EAAWC,EAAO,CAC/C,IAAME,EAASF,EAAM,OAAO,GAAG,QAAQ,UAAW,EAAE,EAC9CG,EAAQH,EAAM,OAAO,MAC3BD,EAAU,kBAAkBG,EAAQC,CAAK,CAC3C,CAQO,SAASC,EAAuBL,EAAWC,EAAO,CACvDD,EAAU,kBAAkBC,EAAM,OAAO,KAAK,CAChD,CAQO,SAASK,EAAeN,EAAWC,EAAO,CAC/CD,EAAU,UAAUC,EAAM,OAAO,KAAK,CACxC,CAQO,SAASM,GAAmBP,EAAWC,EAAO,CACnDD,EAAU,cAAcC,EAAM,OAAO,KAAK,CAC5C,CAOO,SAASO,EAAaC,EAAQ,CACnC,OAAOA,EAAO,KAAK,EAAE,WAAW,MAAO,GAAG,EAAE,WAAW,QAAS,EAAE,CACpE,CAUO,SAASC,EAAaC,EAAU,CACrC,IAAIC,EAAUD,EAAS,CAAC,EAExB,GAAIE,GAA+BA,EAA4B,OAAS,EAAG,CACzE,IAAMC,EAA2BH,EAAS,KAAMI,GAAMA,EAAE,KAAK,QAAUF,EAA4B,CAAC,CAAC,EACrG,GAAIC,EACFF,EAAUE,MACL,CACL,IAAME,EAA4BL,EAAS,KAAMI,GAAMA,EAAE,KAAK,QAAUF,EAA4B,CAAC,CAAC,EACtG,GAAIG,EACFJ,EAAUI,MACL,CACL,IAAMC,EAA2BN,EAAS,KAAMI,GAAMA,EAAE,KAAK,QAAUF,EAA4B,CAAC,CAAC,EACrG,GAAII,EACFL,EAAUK,MACL,CACL,IAAMC,EAA4BP,EAAS,KAAMI,GAAMA,EAAE,KAAK,QAAUF,EAA4B,CAAC,CAAC,EAClGK,EACFN,EAAUM,EAEV,QAAQ,IAAI,wCAA8C,uCAAuC,CAErG,CACF,CACF,CACF,CAEA,OAAON,CACT,CAOO,SAASO,GAASC,EAAO,CAC9B,IAAMC,EAAS,CACb,EAAG,aACH,EAAG,aACH,EAAG,cACH,EAAG,gBACH,EAAG,gBACH,EAAG,eACH,EAAG,gBACH,EAAG,cACH,EAAG,gBACH,EAAG,cACH,GAAI,gBACJ,GAAI,cACJ,GAAI,gBACJ,GAAI,eACJ,GAAI,cACJ,GAAI,eACJ,GAAI,gBACJ,GAAI,gBACJ,GAAI,YACN,EAEIC,EAAgBD,EAAOD,CAAK,EAC5BE,IAAkB,SACpBA,EAAgBD,EAAO,CAAC,EACxB,QAAQ,MAAM,mDAAmD,GAEnE,IAAME,EAAWD,EAAc,MAAM,IAAI,EACzC,OAAOE,GAASD,EAAS,CAAC,EAAGA,EAAS,CAAC,EAAGA,EAAS,CAAC,CAAC,CACvD,CAUA,SAASC,GAASC,EAAGC,EAAGC,EAAG,CACzB,MAAO,KAAO,GAAK,GAAK,OAAOF,CAAC,GAAK,GAAK,OAAOC,CAAC,GAAK,EAAI,OAAOC,CAAC,GAAG,SAAS,EAAE,EAAE,MAAM,CAAC,CAC5F,CCpJO,IAAMC,EAAN,KAAsB,CAO3B,oBAAsB,CAACC,EAAIC,IAAU,CACnC,IAAMC,EAAU,SAAS,eAAeF,CAAE,EACrCE,IAGLA,EAAQ,MAAQD,EAClB,EAQA,QAAWA,GAAU,CACnB,SAAS,eAAe,cAAc,EAAE,UAAU,OAAO,SAAUA,IAAU,OAAO,EACpF,SAAS,eAAe,YAAY,EAAE,UAAU,OAAO,SAAUA,IAAU,KAAK,EAChF,SAAS,eAAe,sBAAsB,EAAE,UAAU,OAAO,SAAUA,IAAU,KAAK,CAC5F,EAEA,yBAA4BE,GAAY,CACtC,IAAMC,EAAW,SAAS,eAAe,wBAAwB,EACjEA,EAAS,QAAUD,EAEnB,SAAS,eAAe,uBAAuB,EAAE,UAAU,OAAO,SAAUA,CAAO,CACrF,EAQA,iBAAoBE,GAAuB,CACzC,IAAMD,EAAW,SAAS,eAAe,gBAAgB,EACzDA,EAAS,QAAUC,EAEnB,SAAS,eAAe,cAAc,EAAE,UAAU,OAAO,SAAUA,CAAkB,EACrF,SAAS,eAAe,mBAAmB,EAAE,UAAU,OAAO,SAAU,CAACA,CAAkB,CAC7F,EAOA,cAAiBJ,GAAU,CACzB,KAAK,oBAAoB,cAAeA,CAAK,CAC/C,EAOA,UAAaA,GAAU,CACrB,KAAK,oBAAoB,SAAUA,CAAK,CAC1C,EAOA,WAAcA,GAAU,CACtB,KAAK,oBAAoB,WAAYA,CAAK,CAC5C,EAOA,kBAAqBA,GAAU,CAC7B,KAAK,oBAAoB,iBAAkBA,CAAK,CAClD,EAQA,eAAiB,CAACK,EAAKL,IAAU,CAC/B,IAAMD,EAAK,GAAGO,EAAaD,CAAG,CAAC,UAC/B,KAAK,oBAAoBN,EAAIC,CAAK,CACpC,EAgBA,eAAiB,CACbO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAyB,OACxB,CACH,IAAIC,EAAoBP,EAEpBF,IAAY,gBAEdS,EAAoBA,EAAkB,OAAQf,GACrCgB,EAAiB,SAAShB,EAAQ,QAAQ,KAAK,IAAM,EAC7D,IAGCM,IAAY,eAAiBA,IAAY,0BAC3CS,EAAoBA,EAAkB,KAAK,CAACE,EAAGC,IAAMD,EAAE,QAAQ,MAAQC,EAAE,QAAQ,KAAK,GAGpFZ,IAAY,6EACdS,EAAoBI,GAAkCJ,CAAiB,GAGzE,IAAMK,EAAY,SAAS,eAAed,CAAO,EACjDc,EAAU,UAAY,QACtBA,EAAU,UAAY,GAEtB,IAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAKd,EACZc,EAAO,UAAY,eAAiBV,EAAW,UAAW,IAC1DU,EAAO,iBAAiB,SAAUT,CAAQ,EACtCG,EAAkB,QAAU,GAC9BM,EAAO,UAAU,IAAI,UAAU,EAGjC,IAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,QAAUf,EAChBe,EAAM,UAAYT,EAElBO,EAAU,OAAOE,EAAOD,CAAM,EAE9BN,EAAkB,QAASf,GAAY,CACrCqB,EAAO,OACH,KAAK,oBAAoBZ,EAAST,CAAO,EAAGU,EAAeV,CAAO,EAAGc,CAAsB,CAC/F,CACF,CAAC,EAED,KAAK,cAAc,CACrB,EAeA,qBAAuB,CACnBR,EACAC,EACAgB,EACAC,EACAf,EACAC,EACAC,EACAC,EACAC,IACC,CACH,IAAMO,EAAY,SAAS,eAAed,CAAO,EACjDc,EAAU,UAAY,QACtBA,EAAU,UAAY,GAEtB,IAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAKd,EACZc,EAAO,UAAY,eAAiBV,EAAW,UAAW,IAC1DU,EAAO,iBAAiB,SAAUT,CAAQ,EACtCW,EAAQ,QAAU,GACpBF,EAAO,UAAU,IAAI,UAAU,EAGjC,IAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,QAAUf,EAChBe,EAAM,UAAYT,EAElBO,EAAU,OAAOE,EAAOD,CAAM,EAE9BE,EAAQ,QAASE,GAAU,CACzB,IAAMC,EAAW,SAAS,cAAc,UAAU,EAClDA,EAAS,MAAQF,EAASC,CAAK,EAC/BJ,EAAO,OAAOK,CAAQ,EAEtBD,EAAM,CAAC,EAAE,QAAS1B,GAAU,CAC1B2B,EAAS,OACL,KAAK,oBAAoBjB,EAASV,CAAK,EAAGW,EAAeX,CAAK,CAAC,CACnE,CACF,CAAC,CACH,CAAC,EAED,KAAK,cAAc,CACrB,EASA,oBAAsB,CAACA,EAAO4B,EAAWb,IAA2B,CAClE,IAAMc,EAAM,SAAS,cAAc,QAAQ,EAC3C,OAAAA,EAAI,MAAQ7B,EACZ6B,EAAI,UAAYD,EACZ5B,IAAUe,IACZc,EAAI,SAAW,IAEVA,CACT,EAMA,eAAiB,IAAM,CACrB,EAAE,cAAc,EAAE,SAAS,CAC7B,EAMA,cAAgB,IAAM,CACpB,EAAE,cAAc,EAAE,SAAS,CAC7B,CACF,EAWA,SAAST,GAAkCU,EAAM,CAC/C,IAAMC,EAAS,CAAC,EAEVC,EAAe,QACfC,EAAW,CACf,KACA,IACF,EAEMC,EAAQJ,EAAK,KAAKK,GAAQC,EAAiBD,EAAK,MAAM,KAAK,IAAMH,CAAY,EACnFD,EAAO,KAAKG,CAAK,EAWjB,IAAMG,EATgBP,EAAK,OAAQK,GAAS,CAC1C,GACIC,EAAiBD,EAAK,MAAM,KAAK,IAAMH,GACpCC,EAAS,SAASG,EAAiBD,EAAK,MAAM,KAAK,CAAC,IAAM,GAE/D,MAAO,EAEX,CAAC,EAEiC,KAAK,CAAC,EAAGhB,IAAM,OAAOiB,EAAiB,EAAE,MAAM,KAAK,CAAC,EAAI,OAAOA,EAAiBjB,EAAE,MAAM,KAAK,CAAC,CAAC,EAClI,OAAAY,EAAO,KAAK,GAAGM,CAAW,EAEnBN,CACT,CAQA,SAASK,EAAiBE,EAAW,CACnC,IAAMC,EAAQD,EAAU,MAAM,GAAG,EACjC,OAAOC,EAAMA,EAAM,OAAS,CAAC,CAC/B,CClTO,IAAMC,EAAN,KAAmB,CACxB,KACA,QACA,UACA,OAOA,YAAYC,EAAMC,EAASC,EAAW,CACpC,KAAK,KAAOF,EACZ,KAAK,QAAUC,EACf,KAAK,UAAYC,CACnB,CAMA,aAAaC,EAAM,CACjB,IAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAK,QACZA,EAAO,IAAM,GAAG,KAAK,OAAO,IAAI,KAAK,IAAI,4BACzCA,EAAO,OAAS,IAAM,KAAK,aAAaD,CAAI,EAC5C,KAAK,OAASC,EAEd,KAAK,UAAU,UAAY,GAC3B,KAAK,UAAU,OAAOA,CAAM,CAC9B,CAMA,aAAaD,EAAM,CACjB,IAAME,EAAe,KAAK,QAAQ,cAC9BA,GACFA,EAAa,YAAYF,EAAK,EAAGG,CAAa,CAElD,CAEA,UAAW,CACJ,KAAK,SAGV,KAAK,OAAO,KAAO,GACrB,CACF,EC9CO,IAAMC,EAAN,KAAqB,CAK1B,MAAQ,CAAC,EAAG,EAAG,EAAG,CAAC,EASnB,WAAcC,GAAa,CACzB,KAAK,MAAM,QAASC,GAAS,CAC3B,CAAC,iBAAkB,MAAM,EAAE,QAASC,GAChC,SAAS,eAAe,GAAGA,CAAI,IAAID,CAAI,EAAE,EAAE,UAAU,OACjDC,IAAS,iBAAmB,SAAW,YACtCA,IAAS,mBACT,GAAGA,CAAI,IAAID,CAAI,IAAO,GAAGC,CAAI,IAAIF,CAAQ,GAC9C,CACJ,CACF,CAAC,EACD,KAAK,oBAAoBA,CAAQ,CACnC,EAMA,WAAa,IAAM,CACjB,IAAMG,EAAoB,KAAK,cAAc,EACzCA,EAAoB,KAAK,MAAM,QACjC,KAAK,WAAWA,EAAoB,CAAC,CAEzC,EAMA,WAAa,IAAM,CACjB,IAAMA,EAAoB,KAAK,cAAc,EACzCA,EAAoB,GACtB,KAAK,WAAWA,EAAoB,CAAC,CAEzC,EAMA,eAAgB,CACd,IAAMC,EAAa,SAAS,cACxB,iCACJ,EAEA,OAD0B,SAASA,EAAW,GAAG,MAAM,GAAG,EAAE,IAAI,EAAG,EAAE,CAEvE,CAQA,oBAAuBC,GAAgB,CAErC,IAAMC,EAAa,SAAS,eAAe,aAAa,EAClDC,EAAa,SAAS,eAAe,aAAa,EACxDD,EAAW,UAAU,OAAO,WAAYD,IAAgB,CAAC,EACzDE,EAAW,UAAU,OAAO,WAAY,OAAOF,CAAW,IAAM,KAAK,MAAM,MAAM,CACnF,CACF,ECxEO,IAAMG,EAAN,KAAiB,CAKtB,UAMA,aAAc,CACZ,KAAK,UAAYC,EAAa,CAChC,CAQA,wBAA0B,IAAM,CAC9B,IAAMC,EAAY,CAChB,OACA,yBACA,iBACA,aACA,SACA,UACA,gBACF,EACA,OAAO,MAAM,KAAK,KAAK,SAAS,EAAE,KAAK,CAAC,CAACC,CAAI,EAAG,CAACC,CAAI,IAAM,CACzD,IAAMC,EAAYH,EAAU,QAAQC,CAAI,EAClCG,EAAYJ,EAAU,QAAQE,CAAI,EAGlCG,EAAoBF,EAAY,GAAKA,EAAYH,EAAU,OAC3DM,EAAoBF,EAAY,GAAKA,EAAYJ,EAAU,OAEjE,OAAOK,EAAoBC,CAC7B,CAAC,CACH,EAOA,kBAAqBC,GAAQ,CAC3B,KAAK,UAAU,OAAOA,CAAG,EAEzB,IAAMC,EAAa,GAAG,OAAO,SAAS,MAAM,GAAG,OAAO,SAAS,QAAQ,IAAI,mBAAmB,KAAK,SAAS,CAAC,GAC7G,QAAQ,aAAa,KAAM,GAAIA,CAAU,CAC3C,EAQA,eAAiB,CAACD,EAAKE,IAAU,CAC3BC,GACF,QAAQ,IAAI,cAAeH,EAAKE,CAAK,EAEvC,KAAK,UAAU,IAAIF,EAAKE,CAAK,EAE7B,IAAMD,EAAa,GAAG,OAAO,SAAS,MAAM,GAAG,OAAO,SAAS,QAAQ,IAAI,mBAAmB,KAAK,SAAS,CAAC,GAC7G,QAAQ,aAAa,KAAM,GAAIA,CAAU,CAC3C,CACF,EC1EO,IAAMG,EAAN,KAAkB,CAOvB,mBAAqB,CAAC,KAAM,KAAM,KAAM,IAAI,EAO5C,OAAS,CACP,OAAQ,CACN,GAAI,WACJ,GAAI,YACJ,GAAI,QACJ,GAAI,OACN,EACA,MAAO,CACL,GAAI,WACJ,GAAI,YACJ,GAAI,YACJ,GAAI,OACN,EACA,IAAK,CACH,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,KACN,EACA,MAAO,CACL,GAAI,QACJ,GAAI,QACJ,GAAI,OACJ,GAAI,OACN,EACA,eAAgB,CACd,GAAI,0BACJ,GAAI,6BACJ,GAAI,+BACJ,GAAI,yBACN,EACA,OAAQ,CACN,GAAI,SACJ,GAAI,YACJ,GAAI,UACJ,GAAI,QACN,EACA,OAAQ,CACN,GAAI,SACJ,GAAI,SACJ,GAAI,UACJ,GAAI,QACN,EACA,YAAa,CACX,GAAI,UACJ,GAAI,SACJ,GAAI,WACJ,GAAI,aACN,EACA,WAAY,CACV,GAAI,aACJ,GAAI,oBACJ,GAAI,kBACJ,GAAI,aACN,EACA,aAAc,CACZ,GAAI,gBACJ,GAAI,eACJ,GAAI,gBACJ,GAAI,cACN,EACA,UAAW,CACT,GAAI,uBACJ,GAAI,2BACJ,GAAI,yBACJ,GAAI,sBACN,EACA,MAAO,CACL,GAAI,0DACJ,GAAI,4DACJ,GAAI,iEACJ,GAAI,+CACN,EACA,KAAM,CACJ,GAAI,SACJ,GAAI,UACJ,GAAI,SACJ,GAAI,MACN,EACA,KAAM,CACJ,GAAI,YACJ,GAAI,UACJ,GAAI,SACJ,GAAI,UACN,EACA,kBAAmB,CACjB,GAAI,wBACJ,GAAI,6BACJ,GAAI,oBACJ,GAAI,oBACN,EACA,cAAe,CACb,GAAI,mCACJ,GAAI,gCACJ,GAAI,+BACJ,GAAI,4BACN,EACA,YAAa,CACX,GAAI,kBACJ,GAAI,mBACJ,GAAI,YACJ,GAAI,OACN,EACA,SAAU,CACR,GAAI,YACJ,GAAI,wBACJ,GAAI,WACJ,GAAI,MACN,EACA,mBAAoB,CAClB,GAAI,uCACJ,GAAI,8CACJ,GAAI,4CACJ,GAAI,0CACN,EACA,aAAc,CACZ,GAAI,gCACJ,GAAI,uCACJ,GAAI,qCACJ,GAAI,mCACN,EACA,cAAe,CACb,GAAI,iCACJ,GAAI,uCACJ,GAAI,kCACJ,GAAI,2BACN,CACF,EASA,mBAAqB,CAACC,EAAWC,IAAgB,CAC/C,IAAIC,EAIAD,IAAgB,QAClBC,EAAkB,KAAK,mBAAmB,GAG5C,IAAIC,EAAWD,GAAmBF,EAAU,IAAI,MAAM,GAD7B,KAEzB,OAAO,KAAK,gBAAgBG,CAAQ,EAAIA,EAAW,IACrD,EAQA,mBAAqB,IACD,OAAO,SAAS,SAAS,MAAM,GAAG,EACnC,CAAC,EAQpB,YAAeC,GAAU,CACvB,SAAS,iBAAiB,OAAO,EAAE,QAASC,GAAS,CACnDA,EAAK,UAAU,OACX,SACAD,EAAM,kBAAkB,IAAMC,EAAK,SACvC,CACF,CAAC,CACH,EAQA,gBAAmBD,GACV,KAAK,mBAAmB,SAASA,CAAK,EAU/C,sBAAwB,CAACH,EAAaK,IAAS,CAC7C,SAAS,eAAe,cAAc,EAAE,UAAY,KAAK,OAAO,OAAOA,CAAI,EAC3E,SAAS,eAAe,cAAc,EAAE,UAAY,iCAAiC,KAAK,OAAO,MAAMA,CAAI,CAAC,GAC5G,SAAS,eAAe,YAAY,EAAE,UAAY,2BAA2B,KAAK,OAAO,IAAIA,CAAI,CAAC,GAClG,SAAS,eAAe,2BAA2B,EAAE,UAAY,KAAK,OAAO,aAAaA,CAAI,EAC9F,SAAS,eAAe,mBAAmB,EAAE,UAAY,KAAK,OAAO,KAAKA,CAAI,EAC9E,SAAS,eAAe,mBAAmB,EAAE,UAAY,KAAK,OAAO,KAAKA,CAAI,EAC9E,SAAS,eAAe,YAAY,EAAE,UAAY,KAAK,OAAO,MAAMA,CAAI,EACxE,SAAS,eAAe,qBAAqB,EAAE,UAAY,KAAK,OAAO,eAAeA,CAAI,EAC1F,SAAS,eAAe,yBAAyB,EAAE,UAAY,KAAK,OAAO,kBAAkBA,CAAI,EACjG,SAAS,eAAe,gBAAgB,EAAE,UAAY,KAAK,OAAO,UAAUA,CAAI,EAChF,SAAS,eAAe,cAAc,EAAE,UAAY,KAAK,OAAO,MAAMA,CAAI,EAC1E,SAAS,eAAe,cAAc,EAAE,UAAY,KAAK,OAAO,eAAeA,CAAI,EACnF,SAAS,eAAe,cAAc,EAAE,UAAY,KAAK,OAAO,kBAAkBA,CAAI,EACtF,SAAS,eAAe,cAAc,EAAE,UAAY,KAAK,OAAO,UAAUA,CAAI,EAC9E,SAAS,eAAe,gBAAgB,EAAE,UAAY,KAAK,OAAO,cAAcA,CAAI,EACpF,SAAS,eAAe,cAAc,EAAE,MAAQ,KAAK,OAAO,YAAYA,CAAI,EAE5E,IAAMC,EAAW,SAAS,eAAe,UAAU,EAC/CA,IACFA,EAAS,UAAY,KAAK,OAAO,SAASD,CAAI,EAC9CC,EAAS,MAAQ,KAAK,OAAO,cAAcD,CAAI,EAC/CC,EAAS,KAAO,OAAO,SAAS,OAAS,KAAK,OAAO,aAAaD,CAAI,GAMpEL,IAAgB,OAClB,KAAK,aAAaK,CAAI,EACtB,KAAK,YAAYA,CAAI,GAEjBC,GACFA,EAAS,OAAO,CAGtB,EAOA,aAAgBD,GAAS,CACvB,IAAME,EAAa,GAAG,OAAO,SAAS,MAAM,GAAG,KAAK,OAAO,mBAAmBF,CAAI,CAAC,IAAI,OAAO,SAAS,IAAI,GAC3G,QAAQ,aAAa,KAAM,GAAIE,CAAU,CAC3C,EAEA,YAAeF,GAAS,CACtB,IAAMG,EAAW,SAAS,eAAe,WAAW,EAChDA,IACFA,EAAS,KAAO,IAAMH,EAE1B,CACF,EC3PO,IAAMI,EAAU,CAUrB,qBAAuBC,GAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDA0BeA,CAAI;AAAA,+CACNA,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBjD,sBAAwBA,GAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAqBAA,CAAI;AAAA,oCACHA,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBtC,mBAAqBA,GAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDA0BmBA,CAAI;AAAA;AAAA;AAAA;AAAA,8CAITA,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOlD,EAUA,eAAsBC,EAAYC,EAAO,CAUvC,OATiB,MAAM,MAAMC,EAAwB,CACnD,OAAQ,OACR,QAAS,CACP,OAAQ,kCACR,eAAgB,kDAClB,EACA,KAAM,IAAI,gBAAgB,CAAC,MAAAD,CAAK,CAAC,EAAE,SAAS,CAC9C,CAAC,GAEe,KAAK,CACvB,CC3JA,IAAME,GACF,8DAKSC,EAAN,KAAsB,CAC3B,UAMA,KAMA,WAMA,QAKA,yBAA2B,CAAC,EAM5B,KAMA,MAWA,YAAYC,EAAWC,EAAMC,EAAiBC,EAAYC,EAAcC,EAAa,CACnF,KAAK,UAAYL,EACjB,KAAK,KAAOC,EACZ,KAAK,WAAa,CAAC,KAAM,CAAC,EAAG,SAAU,CAAC,CAAC,EACzC,KAAK,gBAAkBC,EACvB,KAAK,WAAaC,EAClB,KAAK,aAAeC,EACpB,KAAK,YAAcC,CACrB,CAQA,WAAcC,GAAY,CACxB,IAAMC,EAAoB,KAAK,WAAW,SAAS,OAC9CC,GAASA,EAAK,KAAOF,CAC1B,EACA,OAAKC,GAKL,KAAK,QAAUE,EAAaF,CAAiB,EAC7C,KAAK,KAAO,KAAK,QAAQ,KAAK,MAC9B,KAAK,MAAQ,KAAK,QAAQ,QAAQ,MAElC,KAAK,WAAW,eAAe,UAAW,KAAK,KAAK,EAGpD,KAAK,6BAA6B,EAClC,KAAK,aAAa,SAAS,EACpB,KAbL,KAAK,WAAW,kBAAkB,SAAS,EACpC,GAaX,EAQA,kBAAqBG,GAAe,CAClC,IAAMC,EAAM,KAAK,WAAW,KAAK,KAAMC,GAAMA,EAAE,KAAOF,CAAU,EAChE,GAAI,CAACC,EACH,YAAK,WAAW,kBAAkB,gBAAgB,EAC3C,GAGT,KAAK,KAAOA,EAAI,KAAK,MAErB,IAAIE,EAAgB,KAAK,qBAAqB,EAAE,KAC3CD,GAAMA,EAAE,QAAQ,QAAU,KAAK,QAAQ,QAAQ,KACpD,EACA,OAAKC,GAOL,KAAK,MAAQA,EAAc,QAAQ,MAEnC,KAAK,WAAW,eAAe,iBAAkB,KAAK,IAAI,EAE1D,KAAK,sBAAsB,EAC3B,KAAK,aAAa,SAAS,EACpB,KAXL,KAAK,WAAW,kBAAkB,gBAAgB,EAClD,KAAK,kBAAkB,KAAK,mBAAmB,EAAE,CAAC,CAAC,EAC5C,GAUX,EAQA,gBAAkB,SAAY,CAI5B,IAAMC,GAHW,MAAMC,EACnBC,EAAQ,sBAAsB,KAAK,IAAI,CAC3C,GACuB,QAAQ,SAEzBC,EAAgB,CAACC,EAAGC,IACtBD,EAAE,QAAQ,MAAM,cAAcC,EAAE,QAAQ,KAAK,EAEjD,KAAK,WAAW,KAAOL,EAAM,OACxBN,GAASA,EAAK,QAAQ,QAAU,gCAAgC,EACjE,KAAKS,CAAa,EAClB,IAAKT,IAAU,CAAC,GAAGA,EAAM,GAAIA,EAAK,KAAK,MAAO,QAAS,CAAC,CAAC,EAAE,EAE/D,KAAK,WAAW,SAAWM,EAAM,OAC5BN,GAASA,EAAK,QAAQ,QAAU,oCACrC,EAAE,KAAKS,CAAa,EAAE,IAAKT,IAAU,CAAC,GAAGA,EAAM,GAAIA,EAAK,QAAQ,KAAK,EAAE,EAGvE,IAAMY,EAAW,KAAK,WAAW,SAAS,OAAQR,GAAMA,EAAE,QAAQ,QAAUS,CAAa,EACzF,KAAK,QAAUZ,EAAaW,CAAQ,EACpC,KAAK,KAAO,KAAK,QAAQ,KAAK,MAC9B,KAAK,MAAQ,KAAK,QAAQ,QAAQ,KACpC,EAOA,uBAAyB,SAAY,CAEnC,IAAIE,GADa,MAAMP,EAAYC,EAAQ,qBAAqB,KAAK,IAAI,CAAC,GACnD,QAAQ,SAG/BM,EAAQ,KAAK,CAACJ,EAAGC,IACbD,EAAE,UAAU,QAAU,QAChB,GACAC,EAAE,UAAU,QAAU,QAClB,GACC,GAAKD,GAAG,cAAcC,CAAC,CACtC,EAGAG,EAAQ,QAASC,GAAW,CAC1B,KAAK,WAAW,KAAK,OAChBf,GAASA,EAAK,QAAQ,QAAUe,EAAO,QAAQ,KAAK,EACrD,QAASf,GAASA,EAAK,QAAQ,KAAKe,CAAM,CAAC,CACjD,CAAC,CACH,EAMA,mBAAqB,IACZ,KAAK,WAAW,SAAS,OAC3BX,GAAMA,EAAE,QAAQ,QAAU,KAAK,QAAQ,QAAQ,KAAK,EACrD,IAAKA,GAAMA,EAAE,KAAK,KAAK,EAU7B,wBAA0B,CAACY,EAAO,SAAc,CAE9C,IAAMC,EAAS,KAAK,WAAW,KAAK,OAC/BC,GAAMA,EAAE,KAAK,SAAWF,GAAQ,KAAK,KAAK,EAAE,KAAK,CAACN,EAAGC,IACtDD,EAAE,QAAQ,QACV,8DACM,GACAC,EAAE,QAAQ,QACZ,8DACM,EACAD,EAAE,QAAQ,MAAM,cAAcC,EAAE,QAAQ,KAAK,CAC3D,EAGA,KAAK,yBAA2B,CAAC,EACjC,IAAMQ,EAA2BF,EAAO,KAAMG,GAAYA,EAAQ,KAAK,QAAU,KAAK,IAAI,EAC1F,OAAID,GACFA,EAAyB,QAAQ,QAASJ,GAAW,CAC/C,KAAK,yBAAyB,SAASA,EAAO,MAAM,KAAK,IAAM,IACjE,KAAK,yBAAyB,KAAKA,EAAO,MAAM,KAAK,CAEzD,CAAC,EAGIE,CACT,EAMA,qBAAuB,IACd,KAAK,WAAW,SAAS,OAAQC,GAAMA,EAAE,KAAK,QAAU,KAAK,IAAI,EAQ1E,sBAAwB,IAAM,CAE5B,IAAMG,EAAiB,CACrB,GAAG,IAAI,IACH,KAAK,WAAW,SAAS,IAAKvB,GAAY,CACxCA,EAAQ,QAAQ,MAChBA,CACF,CAAC,CACL,EAAE,OAAO,CACX,EAEA,KAAK,gBAAgB,eACjB,cACA,WACAuB,EACCvB,GAAYA,EAAQ,GACpBA,GAAYA,EAAQ,QAAQ,MAC7B,GACCwB,GAAU,CAAEC,EAAgB,KAAK,UAAWD,CAAK,CAAG,EACrD,KAAK,YAAY,OAAO,MAAM,KAAK,IAAI,CAC3C,CACF,EAOA,6BAA+B,IAAM,CAEnC,IAAIE,EAAqB,KAAK,mBAAmB,EAAE,QAASR,GACxD,KAAK,wBAAwBA,CAAI,EAAE,OAC9Bb,GACGA,EAAI,QAAQ,QACZ,6DACR,CACJ,EAEAqB,EAAqBA,EAAmB,OAAQJ,GACvCK,EAA0B,SAASL,EAAQ,KAAK,KAAK,IAAM,EACnE,EAED,KAAK,gBAAgB,eACjB,uBACA,iBACAI,EACCrB,GAAQA,EAAI,GACZA,GAAQA,EAAI,QAAQ,MACrB,GACCmB,GAAU,CAAEI,EAAuB,KAAK,UAAWJ,CAAK,CAAG,EAC5D,KAAK,YAAY,OAAO,eAAe,KAAK,IAAI,EAChD,KAAK,IACT,EAGA,KAAK,sBAAsB,CAC7B,EAOA,sBAAwB,IAAM,CAC5B,IAAMK,EAAY,SAAS,eAAe,SAAS,EACnDA,EAAU,UAAY,GAEtB,IAAMC,EAAoB,SAAS,eAAe,uBAAuB,EACzEA,EAAkB,UAAY,GAED,KAAK,wBAAwB,EAErC,QAASC,GAAa,CACzC,IAAMC,EAASC,EAAaF,EAAS,QAAQ,KAAK,EAC5CG,EAAW,GAAGF,CAAM,UACpBG,EAAc,GAAGD,CAAQ,SAEzBE,EAAM,SAAS,cAAc,KAAK,EACxCA,EAAI,UAAY,QAChBA,EAAI,GAAKD,EAELH,IAAWxC,GACbsC,EAAkB,OAAOM,CAAG,EAE5BP,EAAU,OAAOO,CAAG,EAGtB,KAAK,gBAAgB,eACjBD,EACAD,EACAH,EAAS,QACRd,GAAWA,EAAO,MAAM,MACxBA,GAAWA,EAAO,UAAU,MAC7B,GACCO,GAAU,CAAEa,EAAe,KAAK,UAAWb,CAAK,CAAG,EACpDO,EAAS,QAAQ,KACrB,CACF,CAAC,CACH,CACF,ECnVO,IAAMO,EAAN,KAAoB,CAEzB,UAMA,KAMA,eAOA,mBAMA,QAWA,YAAYC,EAAWC,EAAMC,EAAiBC,EAAYC,EAAcC,EAAa,CACnF,KAAK,UAAYL,EACjB,KAAK,KAAOC,EACZ,KAAK,gBAAkBC,EACvB,KAAK,WAAaC,EAClB,KAAK,aAAeC,EACpB,KAAK,YAAcC,CACrB,CAQA,aAAe,SAAY,CAEzB,IAAMC,GADW,MAAMC,EAAYC,EAAQ,mBAAmB,KAAK,IAAI,CAAC,GAC/C,QAAQ,SAGjC,KAAK,QAAU,OAAO,QAAQF,EAAUG,GAAWA,EAAO,KAAK,KAAK,EAGpE,OAAO,OAAO,KAAK,OAAO,EAAE,QAASC,GAAgB,CACnDA,EAAY,KAAOA,EAAY,CAAC,EAAE,SAAS,KAC7C,CAAC,EAGD,KAAK,eAAiB,KAAK,QAAQ,2BAA2B,EAAE,CAAC,EACjE,KAAK,mBACD,kDACN,EAQA,UAAaD,GAAW,CAEtB,IAAME,EAAY,OAAO,OAAO,KAAK,OAAO,EACxC,KAAK,EACL,KAAMC,GAAQA,EAAI,MAAM,QAAUH,CAAM,EAE5C,OAAKE,GAKL,KAAK,eAAiBA,EACtB,KAAK,WAAW,eAAe,SAAU,KAAK,eAAe,MAAM,KAAK,EACxE,KAAK,aAAa,SAAS,EACpB,KAPL,KAAK,WAAW,kBAAkB,QAAQ,EACnC,GAOX,EAQA,cAAiBE,GACS,OAAO,KAAK,KAAK,OAAO,EAAE,SAASA,CAAU,GAMrE,KAAK,mBAAqBA,EAC1B,KAAK,WAAW,eAAe,aAAc,KAAK,kBAAkB,EACpE,KAAK,aAAa,SAAS,EACpB,KAPL,KAAK,WAAW,kBAAkB,YAAY,EACvC,IAcX,qBAAuB,IAAM,CAC3B,IAAMC,EAAgB,OAAO,QAAQ,KAAK,OAAO,EAEjD,KAAK,gBAAgB,qBACjB,eACA,SACAA,EACA,CAAC,CAACC,EAAGL,CAAW,IAAMA,EAAY,KACjCD,GAAWA,EAAO,MAAM,MACxBA,GAAWA,EAAO,UAAU,MAC7B,GACCO,GAAU,CAAEC,EAAe,KAAK,UAAWD,CAAK,CAAG,EACpD,KAAK,YAAY,OAAO,OAAO,KAAK,IAAI,CAC5C,EAEA,KAAK,gBAAgB,eACjB,oBACA,cACAF,EACA,CAAC,CAACI,CAAS,IAAMA,EACjB,CAAC,CAACH,EAAGL,CAAW,IAAMA,EAAY,KAClC,GACCM,GAAU,CAAEG,GAAmB,KAAK,UAAWH,CAAK,CAAG,EACxD,KAAK,YAAY,OAAO,WAAW,KAAK,IAAI,CAChD,CACF,CACF,EClJO,IAAMI,EAAN,KAA2B,CAKhC,KAAO,QAMP,cAMA,sBAQA,IAAI,oBAAqB,CACvB,OAAO,KAAK,eAAiB,KAAK,OAAS,KAC7C,CAQA,IAAI,4BAA6B,CAC/B,OAAO,KAAK,uBAAyB,KAAK,OAAS,KACrD,CAQA,YAAYC,EAAiBC,EAAYC,EAAc,CACrD,KAAK,gBAAkBF,EACvB,KAAK,WAAaC,EAClB,KAAK,aAAeC,CACtB,CAUA,QAAWC,GAAS,CAClB,GAAI,CAAC,CAAC,QAAS,KAAK,EAAE,SAASA,CAAI,EAAG,CACpC,KAAK,WAAW,kBAAkB,MAAM,EACxC,MACF,CAEA,KAAK,WAAW,eAAe,OAAQA,CAAI,EAC3C,KAAK,KAAOA,EAEZ,KAAK,gBAAgB,iBAAiB,KAAK,kBAAkB,EAC7D,KAAK,gBAAgB,QAAQA,CAAI,EAEjC,KAAK,aAAa,SAAS,CAC7B,EAEA,yBAA4BC,GAA0B,CAChDA,IAA0B,IAAQA,IAA0B,KAC9DA,EAAwB,IAG1B,KAAK,sBAAwBA,EAE7B,KAAK,WAAW,eAAe,yBAA0BA,CAAqB,EAC9E,KAAK,gBAAgB,yBAAyBA,CAAqB,EAEnE,KAAK,aAAa,SAAS,CAC7B,EAQA,iBAAoBC,GAAkB,CAChCA,IAAkB,IAAQA,IAAkB,KAC9CA,EAAgB,IAGlB,KAAK,cAAgBA,EAErB,KAAK,WAAW,eAAe,iBAAkBA,CAAa,EAC9D,KAAK,gBAAgB,iBAAiB,KAAK,kBAAkB,EAE7D,KAAK,aAAa,SAAS,CAC7B,CACF,ECtGO,IAAMC,EAAN,KAAoB,CAMzB,gBAAkB,CAAC,EAWnB,YACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACF,CACA,KAAK,gBAAkBL,EACvB,KAAK,gBAAkBC,EACvB,KAAK,cAAgBC,EACrB,KAAK,iBAAmBC,EACxB,KAAK,WAAaC,EAClB,KAAK,qBAAuBC,CAC9B,CASA,kBAAoB,CAACC,EAAQC,IAAU,CACrC,GAAID,IAAW,QAAUA,IAAW,OAClC,MAAO,GAKT,GAAI,CAFqB,KAAK,gBAAgB,wBAAwB,EAAE,IAAKE,GAAaC,EAAaD,EAAS,QAAQ,KAAK,CAAC,EAExG,SAASF,CAAM,EACnC,YAAK,iBAAiB,kBAAkBA,CAAM,EAC9C,OAAO,KAAK,gBAAgBA,CAAM,EAC3B,GAGT,IAAMI,EAAc,KAAK,gBAAgB,wBAAwB,EAAE,KAAMC,GAASF,EAAaE,EAAK,QAAQ,KAAK,IAAML,CAAM,EAAE,QAAQ,KAAMM,GAAWA,EAAO,MAAM,OAASL,CAAK,EACnL,OAAKG,GAKL,KAAK,gBAAgBJ,CAAM,EAAII,EAE/B,KAAK,iBAAiB,eAAeJ,EAAQC,CAAK,EAClD,KAAK,WAAW,SAAS,EAClB,KARL,KAAK,iBAAiB,kBAAkBD,CAAM,EACvC,GAQX,EAQA,qBAAuB,IAAM,CAC3B,OAAO,KAAK,KAAK,eAAe,EAAE,QAC9B,KAAK,iBAAiB,iBAC1B,EACA,KAAK,gBAAkB,CAAC,EACxB,KAAK,gBAAgB,wBAAwB,EAAE,QAASO,GAAQ,CAC9D,KAAK,gBAAgBJ,EAAaI,EAAI,QAAQ,KAAK,CAAC,EAAIA,EAAI,QAAQ,CAAC,CACvE,CAAC,EACD,KAAK,wBAAwB,CAC/B,EAQA,wBAA0B,IAAM,CAC9B,IAAMC,EAAkB,KAAK,0BAA0B,EACjDC,EAAa,KAAK,iBAAiB,wBAAwB,EAC5CD,EAAgB,OAChCE,GAAM,CAACD,EAAW,IAAKE,GAAMA,EAAE,CAAC,CAAC,EAAE,SAASD,CAAC,CAClD,EACa,QAASV,GAAW,CAI/B,OAHIY,GACF,QAAQ,IAAI,+BAAgCZ,CAAM,EAE5CA,EAAQ,CACd,IAAK,OACH,KAAK,iBAAiB,eAAeA,EAAQ,OAAO,EACpD,MACF,IAAK,yBACH,KAAK,iBAAiB,eAAeA,EAAQ,EAAK,EAClD,MACF,IAAK,iBACH,KAAK,iBAAiB,eAAeA,EAAQ,EAAK,EAClD,MACF,IAAK,aACH,KAAK,iBAAiB,eAClBA,EACA,KAAK,cAAc,kBACvB,EACA,MACF,IAAK,SACH,KAAK,iBAAiB,eAClBA,EACA,KAAK,cAAc,eAAe,MAAM,KAC5C,EACA,MACF,IAAK,UACH,KAAK,iBAAiB,eAClBA,EACA,KAAK,gBAAgB,KACzB,EACA,MACF,IAAK,iBACH,KAAK,iBAAiB,eAClBA,EACA,KAAK,gBAAgB,IACzB,EACA,MACF,QACE,IAAMa,EAAe,KAAK,gBAAgB,wBAAwB,EAAE,KAAMX,GAAaC,EAAaD,EAAS,QAAQ,KAAK,IACtHF,CAAM,GAAG,QAAQ,CAAC,EAAE,MAAM,MAC9B,KAAK,iBAAiB,eAAeA,EAAQa,CAAY,EACzD,KACJ,CACF,CAAC,CACH,EAQA,wBAA0B,IAAM,CAC9B,IAAMC,EAAY,CAChB,OACA,iBACA,aACA,SACA,UACA,gBACF,EACA,OAAO,MAAM,KAAK,KAAK,iBAAiB,SAAS,EAAE,KAC/C,CAAC,CAACC,CAAI,EAAG,CAACC,CAAI,IAAM,CAClB,IAAMC,EAAYH,EAAU,QAAQC,CAAI,EAClCG,EAAYJ,EAAU,QAAQE,CAAI,EAGlCG,EAAoBF,EAAY,GAAKA,EAAWH,EAAU,OAC1DM,EAAoBF,EAAY,GAAKA,EAAWJ,EAAU,OAEhE,OAAOK,EAAoBC,CAC7B,CACJ,CACF,EAQA,0BAA4B,IAAM,CAChC,IAAMC,EAAe,CACnB,OACA,yBACA,iBACA,aACA,SACA,UACA,gBACF,EAEMC,EAAiB,KAAK,gBAAgB,wBAAwB,EAAE,IAAKpB,GAAaC,EAAaD,EAAS,QAAQ,KAAK,CAAC,EAE5H,MAAO,CAAC,GAAGmB,EAAc,GAAGC,CAAc,CAC5C,EAQA,aAAgBrB,GAAU,CACxB,GAAIA,IAAU,OACZ,MAAO,GAET,GAAIA,IAAU,QACZ,MAAO,EAGX,EAQA,oBAAsB,IAAM,CAC1B,KAAK,wBAAwB,EAC7B,KAAK,wBAAwB,EAAE,IAAI,CAAC,CAACM,EAAKN,CAAK,IAAM,CAInD,OAHIW,GACF,QAAQ,IAAI,iBAAkBL,EAAKN,CAAK,EAElCM,EAAK,CACX,IAAK,OACH,KAAK,qBAAqB,QAAQN,CAAK,EACvC,MACF,IAAK,yBACH,KAAK,qBAAqB,yBAAyB,KAAK,aAAaA,CAAK,CAAC,EAC3E,MACF,IAAK,iBACH,KAAK,qBAAqB,iBAAiB,KAAK,aAAaA,CAAK,CAAC,EACnE,MACF,IAAK,aACC,KAAK,cAAc,cAAcA,CAAK,GACxC,KAAK,gBAAgB,cAAcA,CAAK,EAE1C,MACF,IAAK,SACC,KAAK,cAAc,UAAUA,CAAK,GACpC,KAAK,gBAAgB,UAAUA,CAAK,EAEtC,MACF,IAAK,UACC,KAAK,gBAAgB,WAAWA,CAAK,GACvC,KAAK,gBAAgB,WAAWA,CAAK,EAEvC,KAAK,qBAAqB,EAC1B,MACF,IAAK,iBACC,KAAK,gBAAgB,kBAAkBA,CAAK,GAC9C,KAAK,gBAAgB,kBAAkBA,CAAK,EAE9C,KAAK,qBAAqB,EAC1B,MACF,QACM,KAAK,kBAAkBM,EAAKN,CAAK,GACnC,KAAK,gBAAgB,eAAeM,EAAKN,CAAK,EAEhD,KACJ,CACF,CAAC,EAED,KAAK,WAAW,SAAS,CAC3B,CACF,ECxQO,IAAMsB,EAAa,CAYxB,MAAO,SAASC,EAAWC,EAAS,CAClC,IAAMC,EAAY,CAAC,EACnB,cAAO,KAAKD,CAAO,EAAE,IAAKE,GAAe,CACvC,GAAIA,IAAe,8DACjB,GAAIH,EAAU,qBAAqB,sBAAuB,CACxD,IAAMI,EAAS,CAAC,EAChBJ,EAAU,gBAAgB,yBAAyB,QAAQ,CAACK,EAASC,IAAU,CACzED,IAAY,sEACdD,EAAOC,CAAO,EAAI,GAEtB,CAAC,EACDH,EAAUD,EAAQE,CAAU,EAAE,QAAQ,KAAK,EAAI,CAC7C,KAAM,QACN,OAAQC,CACV,CACF,MACEF,EAAUD,EAAQE,CAAU,EAAE,QAAQ,KAAK,EAAI,CAC7C,KAAM,SACN,MAAOF,EAAQE,CAAU,EAAE,MAAM,KACnC,OAGFD,EAAUD,EAAQE,CAAU,EAAE,QAAQ,KAAK,EAAI,CAC7C,KAAM,SACN,MAAOF,EAAQE,CAAU,EAAE,MAAM,KACnC,CAEJ,CAAC,EAEDD,EAAU,0DAA0D,EAChEH,EAAW,aACPC,EACAA,EAAU,qBAAqB,aACnC,EAEG,CACL,QAAS,QACT,MAAO,oBACP,WAAY,CACV,KAAM,SACN,IAAK,GAAGO,CAAe,EACzB,EACA,OAAQ,CACN,KAAM,MACN,KAAM,CACJ,MAAO,CACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,EACA,YAAa,CACX,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,EACA,MAAO,CACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,CACF,CACF,EACA,aAAc,CACZ,CACE,IAAK,eACL,QAAS,QACT,KAAM,CACJ,MAAO,CACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,EACA,YAAa,CACX,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,EACA,MAAO,CACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,CACF,EACA,MAAO,CACL,CACE,IAAKP,EAAU,gBAAgB,KAC/B,WAAYA,EAAU,gBAAgB,KACtC,QAASE,CACX,CACF,EACA,UAAW,SACX,yBAA0B,CACxB,OAAQ,CACN,OAAQ,GACR,aAAc,EAChB,EACA,UAAW,CACT,OAAQ,GACR,aACI,qDACJ,QAAS,CACP,KAAM,QACN,KAAM,GACN,GAAI,EACN,CACF,EACA,YAAa,CACX,OAAQ,GACR,cAAe,CAAC,CAClB,EACA,YAAa,CACX,OAAQ,GACR,KAAM,UACR,CACF,EACA,OAAQ,CACN,EAAG,CACD,aACI,qDACJ,QAAS,CACP,YAAa,SACb,aAAc,KAChB,CACF,EACA,EAAG,CACD,aAAcF,EAAU,gBAAgB,KAC1C,EACA,GAAIA,EAAU,qBAAqB,eAAiBD,EAAW,cAAc,EAC7E,GAAIC,EAAU,qBAAqB,uBAAyBD,EAAW,sBAAsBC,CAAS,CACxG,CACF,CACF,EACA,eAAgB,cAClB,CACF,EAaA,IAAK,SAASA,EAAWC,EAAS,CAChC,IAAMO,EAAe,CAAC,EAEtBR,EAAU,cAAc,QAAQA,EAAU,cAAc,kBAAkB,EAAE,QACvES,GAAYD,EAAaC,EAAO,MAAM,KAAK,EAAI,EACpD,EAEA,IAAMP,EAAY,CAAC,EACnB,OAAAA,EAAU,0DAA0D,EAChEH,EAAW,aAAaC,EAAW,EAAI,EAE3C,OAAO,KAAKC,CAAO,EAAE,IAAKE,GAAe,CACvCD,EAAUD,EAAQE,CAAU,EAAE,QAAQ,KAAK,EAAI,CAC7C,KAAM,SACN,MAAOF,EAAQE,CAAU,EAAE,MAAM,KACnC,CACF,CAAC,EAEM,CACL,QAAS,QACT,MAAO,oBACP,WAAY,CACV,KAAM,SACN,IAAK,GAAGI,CAAe,EACzB,EACA,OAAQ,CACN,KAAM,MACN,KAAM,CACJ,MAAO,CACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,EACA,YAAa,CACX,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,CACF,CACF,EACA,aAAc,CACZ,CACE,IAAK,eACL,QAAS,QACT,KAAM,CACJ,MAAO,CACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,EACA,YAAa,CACX,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,EACN,CACF,EACA,MAAO,CACL,CACE,IAAKP,EAAU,gBAAgB,KAC/B,WAAYA,EAAU,gBAAgB,KACtC,QAASE,CACX,CACF,EACA,YAAa,YACb,UAAW,MACX,yBAA0B,CACxB,OAAQ,CACN,OAAQ,GACR,aAAc,EAChB,EACA,UAAW,CACT,OAAQ,GACR,aACI,qDACJ,QAAS,CACP,KAAM,QACN,KAAM,GACN,GAAI,EACN,CACF,EACA,YAAa,CACX,OAAQ,GACR,cAAe,CAAC,CAClB,EACA,YAAa,CACX,OAAQ,GACR,KAAM,UACR,CACF,EACA,UAAW,CACT,KAAM,GACN,OAAQ,EACV,EACA,OAAQ,CACN,UAAW,CACT,aACI,2DACJ,MAAO,CACL,KAAM,YACN,aAAcF,EAAU,gBAAgB,MACxC,QAAS,UACT,UAAW,aACX,kBAAmB,SACnB,QAAS,GACX,CACF,EACA,UAAW,CACT,aACI,qDACJ,eAAgB,GAChB,SAAU,GACV,KAAM,UACN,cAAe,EACjB,CACF,CACF,CACF,EACA,eAAgB,eAChB,iBAAkB,CAChB,QAAS,CAAC,CACZ,CACF,CACF,EAUA,cAAe,UAAW,CACxB,MAAO,CACL,QAAS,CACP,aACI,2DACJ,QAAS,aACT,QAAS,CACP,YAAa,SACb,aAAc,KAChB,EACA,aAAc,CACZ,+BAAgC,UAChC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,+BAAgC,UAChC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,gCAAiC,UACjC,+BAAgC,UAChC,+BAAgC,UAChC,+BAAgC,UAChC,+BAAgC,UAChC,+BAAgC,UAChC,+BAAgC,UAChC,+BAAgC,UAChC,kCAAmC,UACnC,4DAA6D,UAC7D,6DAA8D,UAC9D,8DAA+D,UAC/D,8DAA+D,UAC/D,8DAA+D,UAC/D,8DAA+D,UAC/D,8DAA+D,UAC/D,6DAA8D,UAC9D,6DAA8D,UAC9D,6DAA8D,UAC9D,6DAA8D,UAC9D,6DAA8D,UAC9D,6DAA8D,UAC9D,6DAA8D,UAC9D,6DAA8D,UAC9D,+DAAgE,UAChE,+DAAgE,UAChE,+DAAgE,UAChE,+DAAgE,UAChE,+DAAgE,UAChE,qEAAsE,UACtE,qEAAsE,UACtE,qEAAsE,UACtE,qEAAsE,UACtE,qEAAsE,UACtE,qEAAsE,SACxE,EACA,KAAM,UACN,iBAAkB,EACpB,CACF,CACF,EAiBA,sBAAuB,SAASA,EAAW,CACzC,IAAMU,EAAe,CAAC,EAEtBV,EAAU,gBAAgB,yBAAyB,QAAQ,CAACK,EAASC,IAAU,CAC7EI,EAAaL,CAAO,EAAIM,GAASL,CAAK,CACxC,CAAC,EAGD,IAAMM,EADkBZ,EAAU,gBAAgB,KAChB,MAAM,GAAG,EAC3C,OAAAY,EAAU,IAAI,EAIP,CACL,QAAS,CACP,YAJgBA,EAAU,KAAK,GAAG,EAAI,sGAKtC,QAAS,aACT,QAAS,CACP,YAAa,SACb,aAAc,KAChB,EACA,aAAcF,EACd,KAAM,SACR,CACF,CACF,EAaA,aAAc,SAASV,EAAWa,EAAO,CACvC,GAAIA,EAAO,CACT,IAAML,EAAe,CAAC,EAEtB,OAAAR,EAAU,cAAc,QACpBA,EAAU,cAAc,kBACxB,EAAE,QAASS,GAAYD,EAAaC,EAAO,MAAM,KAAK,EAAI,EAAK,EAE5D,CACL,KAAM,QACN,OAAQD,CACV,CACF,KACE,OAAO,CACL,KAAM,SACN,MAAOR,EAAU,cAAc,eAAe,MAAM,KACtD,CAEJ,CACF,EC/bO,IAAMc,EAAN,KAAkB,CAEvBC,GAAiB,iBAEjBC,GAEA,aAAc,CACZ,KAAKA,GAAe,SAAS,eAAe,KAAKD,EAAc,CACjE,CAEA,QAAQE,EAAM,CACZ,KAAKD,GAAa,KAAOE,EAA4BD,CACvD,CACF,ECEO,IAAME,EAAN,KAAgB,CAOrB,YAAYC,EAAMC,EAASC,EAAW,CAMpC,KAAK,KAAOF,EAMZ,KAAK,gBAAkB,IAAIG,EAM3B,KAAK,aAAe,IAAIC,EAAa,KAAK,KAAMH,EAASC,CAAS,EAMlE,KAAK,eAAiB,IAAIG,EAM1B,KAAK,WAAa,IAAIC,EAMtB,KAAK,YAAc,IAAIC,EAMvB,KAAK,gBAAkB,IAAIC,EACvB,KACA,KAAK,KACL,KAAK,gBACL,KAAK,WACL,KAAK,aACL,KAAK,WACT,EAMA,KAAK,cAAgB,IAAIC,EACrB,KACA,KAAK,KACL,KAAK,gBACL,KAAK,WACL,KAAK,aACL,KAAK,WACT,EAMA,KAAK,qBAAuB,IAAIC,EAC5B,KAAK,gBACL,KAAK,WACL,KAAK,YACT,EAMA,KAAK,cAAgB,IAAIC,EACrB,KAAK,gBACL,KAAK,gBACL,KAAK,cACL,KAAK,WACL,KAAK,aACL,KAAK,oBACT,EAEA,KAAK,YAAc,IAAIC,CACzB,CASA,WAAa,SAAY,CAEvB,KAAK,WAAW,eAAe,OAAQ,KAAK,IAAI,EAGhD,MAAM,QAAQ,IAAI,CAChB,KAAK,gBAAgB,gBAAgB,EACrC,KAAK,cAAc,aAAa,CAClC,CAAC,EAGD,MAAM,KAAK,gBAAgB,uBAAuB,EAGlD,KAAK,gBAAgB,sBAAsB,EAC3C,KAAK,gBAAgB,6BAA6B,EAClD,KAAK,cAAc,qBAAqB,EAGxC,KAAK,cAAc,qBAAqB,EACxC,KAAK,cAAc,oBAAoB,EAGvC,KAAK,aAAa,aAAa,IAC3BC,EAAW,KAAK,qBAAqB,IAAI,EACrC,KACA,KAAK,cAAc,eACvB,CACJ,EACA,KAAK,aAAa,SAAS,EAG3B,KAAK,gBAAgB,cAAc,EACnC,KAAK,gBAAgB,eAAe,CACtC,EAOA,QAAWC,GAAU,CACnB,KAAK,eAAe,WAAW,OAAOA,CAAK,CAAC,CAC9C,EAMA,YAAc,IAAM,CAClB,KAAK,eAAe,WAAW,CACjC,EAMA,YAAc,IAAM,CAClB,KAAK,eAAe,WAAW,CACjC,EAOA,WAAcA,GAAU,CACtB,KAAK,gBAAgB,WAAWA,CAAK,CACvC,EAOA,kBAAqBA,GAAU,CAC7B,KAAK,gBAAgB,kBAAkBA,CAAK,EAC5C,KAAK,YAAY,QAAQA,CAAK,CAChC,EAOA,UAAaA,GAAU,CACrB,KAAK,cAAc,UAAUA,CAAK,CACpC,EAOA,cAAiBA,GAAU,CACzB,KAAK,cAAc,cAAcA,CAAK,CACxC,EAOA,QAAWA,GAAU,CACnB,KAAK,qBAAqB,QAAQA,CAAK,CACzC,EAQA,yBAA4BA,GAAU,CACpC,KAAK,qBAAqB,yBAAyBA,CAAK,CAC1D,EAOA,iBAAoBA,GAAU,CAC5B,KAAK,qBAAqB,iBAAiBA,CAAK,CAClD,EAQA,kBAAoB,CAACC,EAAKD,IAAU,CAClC,KAAK,cAAc,kBAAkBC,EAAKD,CAAK,CACjD,EAOA,gBAAkB,IAAM,CACtB,QAAQ,IACJD,EAAW,KAAK,qBAAqB,IAAI,EACrC,KACA,KAAK,cAAc,eACvB,CACJ,CACF,CACF,EC9PA,IAAIG,EAEAC,EAMEC,EAAc,IAAIC,EAGxBC,GAAe,EAWf,eAAsBC,GAAWC,EAAMC,EAAM,KAAM,CACjD,GAAI,CACF,GAAID,IAAS,KAAM,CACjB,IAAME,EAAYC,EAAa,EAC/BH,EAAOJ,EAAY,mBAAmBM,EAAWD,CAAG,CACtD,CACIA,IACFN,EAAcM,GAGhBG,EAAW,EAEX,IAAMC,EAAU,SAAS,eAAe,cAAc,EAElDA,GAGFX,EAAY,IAAIY,EACdN,EACAO,EACAF,EACAV,CACF,EAGAC,EAAY,YAAYI,CAAI,EAC5BJ,EAAY,sBAAsBD,EAAaK,CAAI,EAGnD,MAAMN,EAAU,WAAW,EAE3Bc,EAAW,GAGX,QAAQ,MAAM,iDAAiD,CAGnE,OACOC,EAAO,CACZ,QAAQ,MAAM,0BAA2BA,CAAK,EAC9CC,EAAUd,EAAaI,CAAI,CAC7B,CACF,CAiBA,SAASF,IAAiB,CACxB,IAAMa,EAAe,SAAS,iBAAiB,OAAO,EACtD,QAAWC,KAAeD,EACxBC,EAAY,iBAAiB,QAASC,EAAY,EAG5B,SAAS,eAAe,aAAa,EAC7C,iBAAiB,QAASC,EAAU,EAE5B,SAAS,eAAe,aAAa,EAC7C,iBAAiB,QAASC,EAAc,EAEnB,SAAS,eAC1C,wBAAwB,EACC,iBAAiB,SAC1CC,EAA8B,EAEL,SAAS,eAAe,gBAAgB,EAChD,iBAAiB,SAAUC,EAAsB,EAEtE,IAAMC,EAAsB,SAAS,iBACjC,gCAAgC,EACpC,QAAWC,KAAsBD,EAC/BC,EAAmB,iBAAiB,QAASC,EAAY,EAG3D,IAAMC,EAAqB,SAAS,iBAChC,0BAA0B,EAC9B,QAAWC,KAAqBD,EAC9BC,EAAkB,iBAAiB,QAASC,EAAY,EAGtC,SAAS,eAAe,cAAc,EAC9C,iBAAiB,QAASC,EAAY,CACpD,CAOA,SAASX,GAAaY,EAAO,CAC3B/B,EAAU,QAAQ,OAAO+B,EAAM,OAAO,QAAQ,IAAI,CAAC,CACrD,CAMA,SAASX,IAAa,CACpBpB,EAAU,YAAY,CACxB,CAMA,SAASqB,IAAiB,CACxBrB,EAAU,YAAY,CACxB,CAQA,SAASsB,GAA+BS,EAAO,CAC7CC,GAA8BD,EAAM,OAAO,OAAO,EAC9CA,EAAM,OAAO,UACf/B,EAAU,iBAAiB,EAAK,EAChCA,EAAU,QAAQ,OAAO,GAE3BA,EAAU,yBAAyB+B,EAAM,OAAO,OAAO,CACzD,CAOA,SAASR,GAAuBQ,EAAO,CACrC/B,EAAU,yBAAyB,EAAK,EACxCA,EAAU,iBAAiB+B,EAAM,OAAO,OAAO,CACjD,CAOA,SAASL,GAAaK,EAAO,CACvBA,EAAM,OAAO,QAAQ,OAAS,OAChC/B,EAAU,yBAAyB,EAAK,EAE1CA,EAAU,QAAQ+B,EAAM,OAAO,QAAQ,IAAI,CAC7C,CAQA,eAAeF,GAAaE,EAAO,CACjC,GAAIA,EAAO,CACT,IAAMzB,EAAOyB,EAAM,OAAO,QAAQ,KAC9B7B,EAAY,gBAAgBI,CAAI,GAClC,MAAMD,GAAWC,EAAML,CAAW,CAEtC,CACF,CAEA,SAAS6B,IAAe,CACtB,OAAO,SAAW,OAAO,SAAS,QACpC,CAEA,SAASE,GAA8BC,EAAQ,CAChB,SAAS,eAAe,uBAAuB,EACvD,UAAU,OAAO,SAAUA,CAAM,CACxD",
  "names": ["showLoader", "loader", "content", "hideLoader", "showError", "i18nService", "lang", "VISUALIZE_URL", "LINDAS_ENDPOINT", "LINDAS_CACHED_ENDPOINT", "DEBUG_LOGS", "VISUALIZE_CUBE_LINK_START", "DEFAULT_TOPIC", "DEFAULT_CLASSIFICATION_LIST", "TOPICS_TO_IGNORE", "CLASSIFICATIONS_TO_IGNORE", "getUrlParams", "onUpdateMeasure", "lfiViewer", "event", "onUpdateFilter", "filter", "value", "onUpdateClassification", "onUpdateRegion", "onUpdateRegionType", "cssifyString", "string", "evaluateCube", "measures", "measure", "DEFAULT_CLASSIFICATION_LIST", "firstFoundClassification", "m", "secondFoundClassification", "thirdFoundClassification", "fourthFoundClassification", "getColor", "color", "colors", "colorSelected", "colorRgb", "rgbToHex", "r", "g", "b", "UiAccessService", "id", "value", "element", "checked", "checkbox", "displayRegionTypes", "key", "cssifyString", "fieldId", "selectId", "elements", "getValue", "getDisplayText", "isSearch", "onChange", "labelText", "selectedClassification", "sanitizedElements", "TOPICS_TO_IGNORE", "a", "b", "sanitizeClassificationFilterField", "container", "select", "label", "entries", "getGroup", "entry", "optgroup", "innerHtml", "opt", "data", "result", "firstInArray", "toRemove", "total", "item", "getIdOfDimension", "sortedArray", "dimension", "array", "ChartService", "lang", "baseUrl", "container", "data", "iframe", "iframeWindow", "VISUALIZE_URL", "StepperService", "nextStep", "step", "type", "currentStepNumber", "activeStep", "currentStep", "lastButton", "nextButton", "UrlService", "getUrlParams", "sortOrder", "keyA", "keyB", "priorityA", "priorityB", "adjustedPriorityA", "adjustedPriorityB", "key", "updatedUrl", "value", "DEBUG_LOGS", "I18nService", "urlParams", "environment", "pageLanguageLFI", "language", "value", "item", "lang", "backlink", "updatedUrl", "logolink", "queries", "lang", "queryLindas", "query", "LINDAS_CACHED_ENDPOINT", "classificationUnit", "PropertyService", "lfiViewer", "lang", "uiAccessService", "urlService", "chartService", "i18nService", "measure", "populatedMeasures", "prop", "evaluateCube", "propertyId", "key", "m", "parentMeasure", "props", "queryLindas", "queries", "sortByDimPath", "a", "b", "measures", "DEFAULT_TOPIC", "options", "option", "cube", "result", "k", "classificationDimensions", "element", "uniqueMeasures", "event", "onUpdateMeasure", "classificationKeys", "CLASSIFICATIONS_TO_IGNORE", "onUpdateClassification", "filterDiv", "classificationDiv", "property", "filter", "cssifyString", "filterId", "containerId", "div", "onUpdateFilter", "RegionService", "lfiViewer", "lang", "uiAccessService", "urlService", "chartService", "i18nService", "regions", "queryLindas", "queries", "region", "regionArray", "newRegion", "reg", "regionType", "regionEntries", "_", "event", "onUpdateRegion", "regionKey", "onUpdateRegionType", "VisualizationService", "uiAccessService", "urlService", "chartService", "mode", "groupedClassification", "groupedRegion", "FilterService", "uiAccessService", "propertyService", "regionService", "urlService", "chartService", "visualizationService", "filter", "value", "property", "cssifyString", "filterValue", "prop", "option", "key", "possibleFilters", "setFilters", "f", "e", "DEBUG_LOGS", "defaultValue", "sortOrder", "keyA", "keyB", "priorityA", "priorityB", "adjustedPriorityA", "adjustedPriorityB", "fixedFilters", "dynamicFilters", "chartState", "lfiViewer", "filters", "filterObj", "filterName", "values", "element", "index", "LINDAS_ENDPOINT", "regionValues", "region", "colorMapping", "getColor", "cubeParts", "multi", "LinkService", "#linkElementId", "#linkElement", "cube", "VISUALIZE_CUBE_LINK_START", "LfiViewer", "lang", "baseUrl", "container", "UiAccessService", "ChartService", "StepperService", "UrlService", "I18nService", "PropertyService", "RegionService", "VisualizationService", "FilterService", "LinkService", "chartState", "value", "key", "lfiViewer", "environment", "i18nService", "I18nService", "registerEvents", "initialize", "lang", "env", "urlParams", "getUrlParams", "showLoader", "element", "LfiViewer", "VISUALIZE_URL", "hideLoader", "error", "showError", "stepElements", "stepElement", "onChangeStep", "onNextStep", "onPreviousStep", "onGroupedClassificationChanged", "onGroupedRegionChanged", "chartButtonElements", "chartButtonElement", "onSwitchMode", "changeLangElements", "changeLangElement", "onChangeLang", "onResetClick", "event", "setClassificationFilterHidden", "hidden"]
}
